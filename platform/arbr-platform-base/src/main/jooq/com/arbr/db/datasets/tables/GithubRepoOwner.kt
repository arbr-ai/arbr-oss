/*
 * This file is generated by jOOQ.
 */
package com.arbr.db.datasets.tables


import com.arbr.db.datasets.Datasets
import com.arbr.db.datasets.keys.GITHUB_REPO_OWNER_PKEY
import com.arbr.db.datasets.tables.records.GithubRepoOwnerRecord

import java.util.function.Function

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row18
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GithubRepoOwner(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, GithubRepoOwnerRecord>?,
    aliased: Table<GithubRepoOwnerRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<GithubRepoOwnerRecord>(
    alias,
    Datasets.DATASETS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>datasets.github_repo_owner</code>
         */
        val GITHUB_REPO_OWNER: GithubRepoOwner = GithubRepoOwner()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<GithubRepoOwnerRecord> = GithubRepoOwnerRecord::class.java

    /**
     * The column <code>datasets.github_repo_owner.login</code>.
     */
    val LOGIN: TableField<GithubRepoOwnerRecord, String?> = createField(DSL.name("login"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo_owner.id</code>.
     */
    val ID: TableField<GithubRepoOwnerRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo_owner.node_id</code>.
     */
    val NODE_ID: TableField<GithubRepoOwnerRecord, String?> = createField(DSL.name("node_id"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo_owner.avatar_url</code>.
     */
    val AVATAR_URL: TableField<GithubRepoOwnerRecord, String?> = createField(DSL.name("avatar_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo_owner.gravatar_id</code>.
     */
    val GRAVATAR_ID: TableField<GithubRepoOwnerRecord, String?> = createField(DSL.name("gravatar_id"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo_owner.url</code>.
     */
    val URL: TableField<GithubRepoOwnerRecord, String?> = createField(DSL.name("url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo_owner.html_url</code>.
     */
    val HTML_URL: TableField<GithubRepoOwnerRecord, String?> = createField(DSL.name("html_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo_owner.followers_url</code>.
     */
    val FOLLOWERS_URL: TableField<GithubRepoOwnerRecord, String?> = createField(DSL.name("followers_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo_owner.following_url</code>.
     */
    val FOLLOWING_URL: TableField<GithubRepoOwnerRecord, String?> = createField(DSL.name("following_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo_owner.gists_url</code>.
     */
    val GISTS_URL: TableField<GithubRepoOwnerRecord, String?> = createField(DSL.name("gists_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo_owner.starred_url</code>.
     */
    val STARRED_URL: TableField<GithubRepoOwnerRecord, String?> = createField(DSL.name("starred_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo_owner.subscriptions_url</code>.
     */
    val SUBSCRIPTIONS_URL: TableField<GithubRepoOwnerRecord, String?> = createField(DSL.name("subscriptions_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo_owner.organizations_url</code>.
     */
    val ORGANIZATIONS_URL: TableField<GithubRepoOwnerRecord, String?> = createField(DSL.name("organizations_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo_owner.repos_url</code>.
     */
    val REPOS_URL: TableField<GithubRepoOwnerRecord, String?> = createField(DSL.name("repos_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo_owner.events_url</code>.
     */
    val EVENTS_URL: TableField<GithubRepoOwnerRecord, String?> = createField(DSL.name("events_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo_owner.received_events_url</code>.
     */
    val RECEIVED_EVENTS_URL: TableField<GithubRepoOwnerRecord, String?> = createField(DSL.name("received_events_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo_owner.type</code>.
     */
    val TYPE: TableField<GithubRepoOwnerRecord, String?> = createField(DSL.name("type"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo_owner.site_admin</code>.
     */
    val SITE_ADMIN: TableField<GithubRepoOwnerRecord, Boolean?> = createField(DSL.name("site_admin"), SQLDataType.BOOLEAN.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<GithubRepoOwnerRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<GithubRepoOwnerRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>datasets.github_repo_owner</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>datasets.github_repo_owner</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>datasets.github_repo_owner</code> table reference
     */
    constructor(): this(DSL.name("github_repo_owner"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, GithubRepoOwnerRecord>): this(Internal.createPathAlias(child, key), child, key, GITHUB_REPO_OWNER, null)
    override fun getSchema(): Schema? = if (aliased()) null else Datasets.DATASETS
    override fun getPrimaryKey(): UniqueKey<GithubRepoOwnerRecord> = GITHUB_REPO_OWNER_PKEY
    override fun `as`(alias: String): GithubRepoOwner = GithubRepoOwner(DSL.name(alias), this)
    override fun `as`(alias: Name): GithubRepoOwner = GithubRepoOwner(alias, this)
    override fun `as`(alias: Table<*>): GithubRepoOwner = GithubRepoOwner(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): GithubRepoOwner = GithubRepoOwner(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): GithubRepoOwner = GithubRepoOwner(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): GithubRepoOwner = GithubRepoOwner(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row18<String?, Int?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, Boolean?> = super.fieldsRow() as Row18<String?, Int?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, Boolean?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, Int?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, Boolean?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, Int?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, Boolean?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
