/*
 * This file is generated by jOOQ.
 */
package com.arbr.db.datasets.tables


import com.arbr.db.datasets.Datasets
import com.arbr.db.datasets.indexes.GITHUB_COMMIT_RECORD_PULL_REQUEST_ID_IDX
import com.arbr.db.datasets.keys.GITHUB_COMMIT_RECORD__GITHUB_COMMIT_RECORD_COMMIT_INFO_SHA_FKEY
import com.arbr.db.datasets.keys.GITHUB_COMMIT_RECORD__GITHUB_COMMIT_RECORD_PULL_REQUEST_ID_FKEY
import com.arbr.db.datasets.tables.records.GithubCommitRecordRecord

import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.JSONB
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row4
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GithubCommitRecord(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, GithubCommitRecordRecord>?,
    aliased: Table<GithubCommitRecordRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<GithubCommitRecordRecord>(
    alias,
    Datasets.DATASETS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>datasets.github_commit_record</code>
         */
        val GITHUB_COMMIT_RECORD: GithubCommitRecord = GithubCommitRecord()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<GithubCommitRecordRecord> = GithubCommitRecordRecord::class.java

    /**
     * The column <code>datasets.github_commit_record.commit_info_sha</code>.
     */
    val COMMIT_INFO_SHA: TableField<GithubCommitRecordRecord, String?> = createField(DSL.name("commit_info_sha"), SQLDataType.VARCHAR(40).nullable(false), this, "")

    /**
     * The column <code>datasets.github_commit_record.pull_request_id</code>.
     */
    val PULL_REQUEST_ID: TableField<GithubCommitRecordRecord, Long?> = createField(DSL.name("pull_request_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>datasets.github_commit_record.ordinal</code>.
     */
    val ORDINAL: TableField<GithubCommitRecordRecord, Int?> = createField(DSL.name("ordinal"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>datasets.github_commit_record.tags</code>.
     */
    val TAGS: TableField<GithubCommitRecordRecord, JSONB?> = createField(DSL.name("tags"), SQLDataType.JSONB, this, "")

    private constructor(alias: Name, aliased: Table<GithubCommitRecordRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<GithubCommitRecordRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>datasets.github_commit_record</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>datasets.github_commit_record</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>datasets.github_commit_record</code> table reference
     */
    constructor(): this(DSL.name("github_commit_record"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, GithubCommitRecordRecord>): this(Internal.createPathAlias(child, key), child, key, GITHUB_COMMIT_RECORD, null)
    override fun getSchema(): Schema? = if (aliased()) null else Datasets.DATASETS
    override fun getIndexes(): List<Index> = listOf(GITHUB_COMMIT_RECORD_PULL_REQUEST_ID_IDX)
    override fun getReferences(): List<ForeignKey<GithubCommitRecordRecord, *>> = listOf(GITHUB_COMMIT_RECORD__GITHUB_COMMIT_RECORD_COMMIT_INFO_SHA_FKEY, GITHUB_COMMIT_RECORD__GITHUB_COMMIT_RECORD_PULL_REQUEST_ID_FKEY)

    private lateinit var _githubCommit: GithubCommit
    private lateinit var _githubPullRequest: GithubPullRequest

    /**
     * Get the implicit join path to the <code>datasets.github_commit</code>
     * table.
     */
    fun githubCommit(): GithubCommit {
        if (!this::_githubCommit.isInitialized)
            _githubCommit = GithubCommit(this, GITHUB_COMMIT_RECORD__GITHUB_COMMIT_RECORD_COMMIT_INFO_SHA_FKEY)

        return _githubCommit;
    }

    val githubCommit: GithubCommit
        get(): GithubCommit = githubCommit()

    /**
     * Get the implicit join path to the
     * <code>datasets.github_pull_request</code> table.
     */
    fun githubPullRequest(): GithubPullRequest {
        if (!this::_githubPullRequest.isInitialized)
            _githubPullRequest = GithubPullRequest(this, GITHUB_COMMIT_RECORD__GITHUB_COMMIT_RECORD_PULL_REQUEST_ID_FKEY)

        return _githubPullRequest;
    }

    val githubPullRequest: GithubPullRequest
        get(): GithubPullRequest = githubPullRequest()
    override fun `as`(alias: String): GithubCommitRecord = GithubCommitRecord(DSL.name(alias), this)
    override fun `as`(alias: Name): GithubCommitRecord = GithubCommitRecord(alias, this)
    override fun `as`(alias: Table<*>): GithubCommitRecord = GithubCommitRecord(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): GithubCommitRecord = GithubCommitRecord(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): GithubCommitRecord = GithubCommitRecord(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): GithubCommitRecord = GithubCommitRecord(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row4<String?, Long?, Int?, JSONB?> = super.fieldsRow() as Row4<String?, Long?, Int?, JSONB?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, Long?, Int?, JSONB?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, Long?, Int?, JSONB?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
