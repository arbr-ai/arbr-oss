/*
 * This file is generated by jOOQ.
 */
package com.arbr.db.datasets.tables


import com.arbr.db.datasets.Datasets
import com.arbr.db.datasets.keys.GITHUB_FILE_PARSE_TERMINAL_NODE_PKEY
import com.arbr.db.datasets.keys.GITHUB_FILE_PARSE_TERMINAL_NODE__GITHUB_FILE_PARSE_TERMINAL_NODE_TOKEN_ID_FKEY
import com.arbr.db.datasets.tables.records.GithubFileParseTerminalNodeRecord

import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GithubFileParseTerminalNode(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, GithubFileParseTerminalNodeRecord>?,
    aliased: Table<GithubFileParseTerminalNodeRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<GithubFileParseTerminalNodeRecord>(
    alias,
    Datasets.DATASETS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>datasets.github_file_parse_terminal_node</code>
         */
        val GITHUB_FILE_PARSE_TERMINAL_NODE: GithubFileParseTerminalNode = GithubFileParseTerminalNode()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<GithubFileParseTerminalNodeRecord> = GithubFileParseTerminalNodeRecord::class.java

    /**
     * The column <code>datasets.github_file_parse_terminal_node.id</code>.
     */
    val ID: TableField<GithubFileParseTerminalNodeRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column
     * <code>datasets.github_file_parse_terminal_node.token_id</code>.
     */
    val TOKEN_ID: TableField<GithubFileParseTerminalNodeRecord, Long?> = createField(DSL.name("token_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column
     * <code>datasets.github_file_parse_terminal_node.is_error</code>.
     */
    val IS_ERROR: TableField<GithubFileParseTerminalNodeRecord, Boolean?> = createField(DSL.name("is_error"), SQLDataType.BOOLEAN.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<GithubFileParseTerminalNodeRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<GithubFileParseTerminalNodeRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>datasets.github_file_parse_terminal_node</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>datasets.github_file_parse_terminal_node</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>datasets.github_file_parse_terminal_node</code> table
     * reference
     */
    constructor(): this(DSL.name("github_file_parse_terminal_node"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, GithubFileParseTerminalNodeRecord>): this(Internal.createPathAlias(child, key), child, key, GITHUB_FILE_PARSE_TERMINAL_NODE, null)
    override fun getSchema(): Schema? = if (aliased()) null else Datasets.DATASETS
    override fun getIdentity(): Identity<GithubFileParseTerminalNodeRecord, Long?> = super.getIdentity() as Identity<GithubFileParseTerminalNodeRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<GithubFileParseTerminalNodeRecord> = GITHUB_FILE_PARSE_TERMINAL_NODE_PKEY
    override fun getReferences(): List<ForeignKey<GithubFileParseTerminalNodeRecord, *>> = listOf(GITHUB_FILE_PARSE_TERMINAL_NODE__GITHUB_FILE_PARSE_TERMINAL_NODE_TOKEN_ID_FKEY)

    private lateinit var _githubFileParseToken: GithubFileParseToken

    /**
     * Get the implicit join path to the
     * <code>datasets.github_file_parse_token</code> table.
     */
    fun githubFileParseToken(): GithubFileParseToken {
        if (!this::_githubFileParseToken.isInitialized)
            _githubFileParseToken = GithubFileParseToken(this, GITHUB_FILE_PARSE_TERMINAL_NODE__GITHUB_FILE_PARSE_TERMINAL_NODE_TOKEN_ID_FKEY)

        return _githubFileParseToken;
    }

    val githubFileParseToken: GithubFileParseToken
        get(): GithubFileParseToken = githubFileParseToken()
    override fun `as`(alias: String): GithubFileParseTerminalNode = GithubFileParseTerminalNode(DSL.name(alias), this)
    override fun `as`(alias: Name): GithubFileParseTerminalNode = GithubFileParseTerminalNode(alias, this)
    override fun `as`(alias: Table<*>): GithubFileParseTerminalNode = GithubFileParseTerminalNode(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): GithubFileParseTerminalNode = GithubFileParseTerminalNode(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): GithubFileParseTerminalNode = GithubFileParseTerminalNode(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): GithubFileParseTerminalNode = GithubFileParseTerminalNode(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Long?, Long?, Boolean?> = super.fieldsRow() as Row3<Long?, Long?, Boolean?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, Long?, Boolean?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, Long?, Boolean?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
