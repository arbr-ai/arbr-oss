/*
 * This file is generated by jOOQ.
 */
package com.arbr.db.`public`.tables.records


import org.jooq.Field
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserEmailRecord private constructor() : TableRecordImpl<UserEmailRecord>(com.arbr.db.`public`.tables.UserEmail.USER_EMAIL), Record7<Long?, Long?, Long?, String?, String?, Boolean?, Boolean?> {

    open var userId: Long
        set(value): Unit = set(0, value)
        get(): Long = get(0) as Long

    open var creationTimestamp: Long
        set(value): Unit = set(1, value)
        get(): Long = get(1) as Long

    open var updatedTimestamp: Long
        set(value): Unit = set(2, value)
        get(): Long = get(2) as Long

    open var emailAddress: String
        set(value): Unit = set(3, value)
        get(): String = get(3) as String

    open var source: String
        set(value): Unit = set(4, value)
        get(): String = get(4) as String

    open var ghVerified: Boolean?
        set(value): Unit = set(5, value)
        get(): Boolean? = get(5) as Boolean?

    open var ghPrimary: Boolean?
        set(value): Unit = set(6, value)
        get(): Boolean? = get(6) as Boolean?

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row7<Long?, Long?, Long?, String?, String?, Boolean?, Boolean?> = super.fieldsRow() as Row7<Long?, Long?, Long?, String?, String?, Boolean?, Boolean?>
    override fun valuesRow(): Row7<Long?, Long?, Long?, String?, String?, Boolean?, Boolean?> = super.valuesRow() as Row7<Long?, Long?, Long?, String?, String?, Boolean?, Boolean?>
    override fun field1(): Field<Long?> = com.arbr.db.`public`.tables.UserEmail.USER_EMAIL.USER_ID
    override fun field2(): Field<Long?> = com.arbr.db.`public`.tables.UserEmail.USER_EMAIL.CREATION_TIMESTAMP
    override fun field3(): Field<Long?> = com.arbr.db.`public`.tables.UserEmail.USER_EMAIL.UPDATED_TIMESTAMP
    override fun field4(): Field<String?> = com.arbr.db.`public`.tables.UserEmail.USER_EMAIL.EMAIL_ADDRESS
    override fun field5(): Field<String?> = com.arbr.db.`public`.tables.UserEmail.USER_EMAIL.SOURCE
    override fun field6(): Field<Boolean?> = com.arbr.db.`public`.tables.UserEmail.USER_EMAIL.GH_VERIFIED
    override fun field7(): Field<Boolean?> = com.arbr.db.`public`.tables.UserEmail.USER_EMAIL.GH_PRIMARY
    override fun component1(): Long = userId
    override fun component2(): Long = creationTimestamp
    override fun component3(): Long = updatedTimestamp
    override fun component4(): String = emailAddress
    override fun component5(): String = source
    override fun component6(): Boolean? = ghVerified
    override fun component7(): Boolean? = ghPrimary
    override fun value1(): Long = userId
    override fun value2(): Long = creationTimestamp
    override fun value3(): Long = updatedTimestamp
    override fun value4(): String = emailAddress
    override fun value5(): String = source
    override fun value6(): Boolean? = ghVerified
    override fun value7(): Boolean? = ghPrimary

    override fun value1(value: Long?): UserEmailRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Long?): UserEmailRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Long?): UserEmailRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): UserEmailRecord {
        set(3, value)
        return this
    }

    override fun value5(value: String?): UserEmailRecord {
        set(4, value)
        return this
    }

    override fun value6(value: Boolean?): UserEmailRecord {
        set(5, value)
        return this
    }

    override fun value7(value: Boolean?): UserEmailRecord {
        set(6, value)
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: Long?, value4: String?, value5: String?, value6: Boolean?, value7: Boolean?): UserEmailRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        return this
    }

    /**
     * Create a detached, initialised UserEmailRecord
     */
    constructor(userId: Long, creationTimestamp: Long, updatedTimestamp: Long, emailAddress: String, source: String, ghVerified: Boolean? = null, ghPrimary: Boolean? = null): this() {
        this.userId = userId
        this.creationTimestamp = creationTimestamp
        this.updatedTimestamp = updatedTimestamp
        this.emailAddress = emailAddress
        this.source = source
        this.ghVerified = ghVerified
        this.ghPrimary = ghPrimary
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised UserEmailRecord
     */
    constructor(value: com.arbr.db.`public`.tables.pojos.UserEmail?): this() {
        if (value != null) {
            this.userId = value.userId
            this.creationTimestamp = value.creationTimestamp
            this.updatedTimestamp = value.updatedTimestamp
            this.emailAddress = value.emailAddress
            this.source = value.source
            this.ghVerified = value.ghVerified
            this.ghPrimary = value.ghPrimary
            resetChangedOnNotNull()
        }
    }
}
