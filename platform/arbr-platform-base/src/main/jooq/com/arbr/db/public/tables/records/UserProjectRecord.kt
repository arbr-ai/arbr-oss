/*
 * This file is generated by jOOQ.
 */
package com.arbr.db.`public`.tables.records


import org.jooq.Field
import org.jooq.Record2
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserProjectRecord private constructor() : UpdatableRecordImpl<UserProjectRecord>(com.arbr.db.`public`.tables.UserProject.USER_PROJECT), Record4<Long?, Long?, Long?, String?> {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var userId: Long
        set(value): Unit = set(1, value)
        get(): Long = get(1) as Long

    open var creationTimestamp: Long
        set(value): Unit = set(2, value)
        get(): Long = get(2) as Long

    open var fullName: String
        set(value): Unit = set(3, value)
        get(): String = get(3) as String

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<Long?, String?> = super.key() as Record2<Long?, String?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Long?, Long?, Long?, String?> = super.fieldsRow() as Row4<Long?, Long?, Long?, String?>
    override fun valuesRow(): Row4<Long?, Long?, Long?, String?> = super.valuesRow() as Row4<Long?, Long?, Long?, String?>
    override fun field1(): Field<Long?> = com.arbr.db.`public`.tables.UserProject.USER_PROJECT.ID
    override fun field2(): Field<Long?> = com.arbr.db.`public`.tables.UserProject.USER_PROJECT.USER_ID
    override fun field3(): Field<Long?> = com.arbr.db.`public`.tables.UserProject.USER_PROJECT.CREATION_TIMESTAMP
    override fun field4(): Field<String?> = com.arbr.db.`public`.tables.UserProject.USER_PROJECT.FULL_NAME
    override fun component1(): Long? = id
    override fun component2(): Long = userId
    override fun component3(): Long = creationTimestamp
    override fun component4(): String = fullName
    override fun value1(): Long? = id
    override fun value2(): Long = userId
    override fun value3(): Long = creationTimestamp
    override fun value4(): String = fullName

    override fun value1(value: Long?): UserProjectRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Long?): UserProjectRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Long?): UserProjectRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): UserProjectRecord {
        set(3, value)
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: Long?, value4: String?): UserProjectRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised UserProjectRecord
     */
    constructor(id: Long? = null, userId: Long, creationTimestamp: Long, fullName: String): this() {
        this.id = id
        this.userId = userId
        this.creationTimestamp = creationTimestamp
        this.fullName = fullName
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised UserProjectRecord
     */
    constructor(value: com.arbr.db.`public`.tables.pojos.UserProject?): this() {
        if (value != null) {
            this.id = value.id
            this.userId = value.userId
            this.creationTimestamp = value.creationTimestamp
            this.fullName = value.fullName
            resetChangedOnNotNull()
        }
    }
}
