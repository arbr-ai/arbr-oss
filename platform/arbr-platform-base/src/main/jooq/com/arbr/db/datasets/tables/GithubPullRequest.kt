/*
 * This file is generated by jOOQ.
 */
package com.arbr.db.datasets.tables


import com.arbr.db.datasets.Datasets
import com.arbr.db.datasets.keys.GITHUB_PULL_REQUEST_PKEY
import com.arbr.db.datasets.keys.GITHUB_PULL_REQUEST__GITHUB_PULL_REQUEST_REPO_ID_FKEY
import com.arbr.db.datasets.tables.records.GithubPullRequestRecord

import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row9
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GithubPullRequest(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, GithubPullRequestRecord>?,
    aliased: Table<GithubPullRequestRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<GithubPullRequestRecord>(
    alias,
    Datasets.DATASETS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>datasets.github_pull_request</code>
         */
        val GITHUB_PULL_REQUEST: GithubPullRequest = GithubPullRequest()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<GithubPullRequestRecord> = GithubPullRequestRecord::class.java

    /**
     * The column <code>datasets.github_pull_request.id</code>.
     */
    val ID: TableField<GithubPullRequestRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>datasets.github_pull_request.repo_id</code>.
     */
    val REPO_ID: TableField<GithubPullRequestRecord, Long?> = createField(DSL.name("repo_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>datasets.github_pull_request.title</code>.
     */
    val TITLE: TableField<GithubPullRequestRecord, String?> = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_pull_request.body</code>.
     */
    val BODY: TableField<GithubPullRequestRecord, String?> = createField(DSL.name("body"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>datasets.github_pull_request.diff_url</code>.
     */
    val DIFF_URL: TableField<GithubPullRequestRecord, String?> = createField(DSL.name("diff_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_pull_request.html_url</code>.
     */
    val HTML_URL: TableField<GithubPullRequestRecord, String?> = createField(DSL.name("html_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_pull_request.patch_url</code>.
     */
    val PATCH_URL: TableField<GithubPullRequestRecord, String?> = createField(DSL.name("patch_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_pull_request.merge_commit_sha</code>.
     */
    val MERGE_COMMIT_SHA: TableField<GithubPullRequestRecord, String?> = createField(DSL.name("merge_commit_sha"), SQLDataType.VARCHAR(40), this, "")

    /**
     * The column <code>datasets.github_pull_request.commits_url</code>.
     */
    val COMMITS_URL: TableField<GithubPullRequestRecord, String?> = createField(DSL.name("commits_url"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<GithubPullRequestRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<GithubPullRequestRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>datasets.github_pull_request</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>datasets.github_pull_request</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>datasets.github_pull_request</code> table reference
     */
    constructor(): this(DSL.name("github_pull_request"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, GithubPullRequestRecord>): this(Internal.createPathAlias(child, key), child, key, GITHUB_PULL_REQUEST, null)
    override fun getSchema(): Schema? = if (aliased()) null else Datasets.DATASETS
    override fun getPrimaryKey(): UniqueKey<GithubPullRequestRecord> = GITHUB_PULL_REQUEST_PKEY
    override fun getReferences(): List<ForeignKey<GithubPullRequestRecord, *>> = listOf(GITHUB_PULL_REQUEST__GITHUB_PULL_REQUEST_REPO_ID_FKEY)

    private lateinit var _githubRepo: GithubRepo

    /**
     * Get the implicit join path to the <code>datasets.github_repo</code>
     * table.
     */
    fun githubRepo(): GithubRepo {
        if (!this::_githubRepo.isInitialized)
            _githubRepo = GithubRepo(this, GITHUB_PULL_REQUEST__GITHUB_PULL_REQUEST_REPO_ID_FKEY)

        return _githubRepo;
    }

    val githubRepo: GithubRepo
        get(): GithubRepo = githubRepo()
    override fun `as`(alias: String): GithubPullRequest = GithubPullRequest(DSL.name(alias), this)
    override fun `as`(alias: Name): GithubPullRequest = GithubPullRequest(alias, this)
    override fun `as`(alias: Table<*>): GithubPullRequest = GithubPullRequest(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): GithubPullRequest = GithubPullRequest(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): GithubPullRequest = GithubPullRequest(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): GithubPullRequest = GithubPullRequest(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row9<Long?, Long?, String?, String?, String?, String?, String?, String?, String?> = super.fieldsRow() as Row9<Long?, Long?, String?, String?, String?, String?, String?, String?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, Long?, String?, String?, String?, String?, String?, String?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, Long?, String?, String?, String?, String?, String?, String?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
