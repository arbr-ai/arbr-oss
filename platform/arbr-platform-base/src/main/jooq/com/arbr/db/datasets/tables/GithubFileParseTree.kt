/*
 * This file is generated by jOOQ.
 */
package com.arbr.db.datasets.tables


import com.arbr.db.datasets.Datasets
import com.arbr.db.datasets.indexes.GITHUB_FILE_PARSE_TREE_COMMIT_SHA_FILENAME_IDX
import com.arbr.db.datasets.indexes.GITHUB_FILE_PARSE_TREE_COMMIT_SHA_IDX
import com.arbr.db.datasets.indexes.GITHUB_FILE_PARSE_TREE_FILENAME_IDX
import com.arbr.db.datasets.tables.records.GithubFileParseTreeRecord

import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.JSONB
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GithubFileParseTree(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, GithubFileParseTreeRecord>?,
    aliased: Table<GithubFileParseTreeRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<GithubFileParseTreeRecord>(
    alias,
    Datasets.DATASETS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>datasets.github_file_parse_tree</code>
         */
        val GITHUB_FILE_PARSE_TREE: GithubFileParseTree = GithubFileParseTree()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<GithubFileParseTreeRecord> = GithubFileParseTreeRecord::class.java

    /**
     * The column <code>datasets.github_file_parse_tree.commit_info_sha</code>.
     */
    val COMMIT_INFO_SHA: TableField<GithubFileParseTreeRecord, String?> = createField(DSL.name("commit_info_sha"), SQLDataType.VARCHAR(40), this, "")

    /**
     * The column <code>datasets.github_file_parse_tree.filename</code>.
     */
    val FILENAME: TableField<GithubFileParseTreeRecord, String?> = createField(DSL.name("filename"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_file_parse_tree.parse_tree</code>.
     */
    val PARSE_TREE: TableField<GithubFileParseTreeRecord, JSONB?> = createField(DSL.name("parse_tree"), SQLDataType.JSONB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<GithubFileParseTreeRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<GithubFileParseTreeRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>datasets.github_file_parse_tree</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>datasets.github_file_parse_tree</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>datasets.github_file_parse_tree</code> table reference
     */
    constructor(): this(DSL.name("github_file_parse_tree"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, GithubFileParseTreeRecord>): this(Internal.createPathAlias(child, key), child, key, GITHUB_FILE_PARSE_TREE, null)
    override fun getSchema(): Schema? = if (aliased()) null else Datasets.DATASETS
    override fun getIndexes(): List<Index> = listOf(GITHUB_FILE_PARSE_TREE_COMMIT_SHA_FILENAME_IDX, GITHUB_FILE_PARSE_TREE_COMMIT_SHA_IDX, GITHUB_FILE_PARSE_TREE_FILENAME_IDX)
    override fun `as`(alias: String): GithubFileParseTree = GithubFileParseTree(DSL.name(alias), this)
    override fun `as`(alias: Name): GithubFileParseTree = GithubFileParseTree(alias, this)
    override fun `as`(alias: Table<*>): GithubFileParseTree = GithubFileParseTree(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): GithubFileParseTree = GithubFileParseTree(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): GithubFileParseTree = GithubFileParseTree(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): GithubFileParseTree = GithubFileParseTree(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<String?, String?, JSONB?> = super.fieldsRow() as Row3<String?, String?, JSONB?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, String?, JSONB?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, String?, JSONB?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
