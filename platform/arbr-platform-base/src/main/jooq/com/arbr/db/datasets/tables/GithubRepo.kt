/*
 * This file is generated by jOOQ.
 */
package com.arbr.db.datasets.tables


import com.arbr.db.datasets.Datasets
import com.arbr.db.datasets.keys.GITHUB_REPO_PKEY
import com.arbr.db.datasets.keys.GITHUB_REPO__GITHUB_REPO_OWNER_LOGIN_FKEY
import com.arbr.db.datasets.tables.records.GithubRepoRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GithubRepo(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, GithubRepoRecord>?,
    aliased: Table<GithubRepoRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<GithubRepoRecord>(
    alias,
    Datasets.DATASETS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>datasets.github_repo</code>
         */
        val GITHUB_REPO: GithubRepo = GithubRepo()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<GithubRepoRecord> = GithubRepoRecord::class.java

    /**
     * The column <code>datasets.github_repo.id</code>.
     */
    val ID: TableField<GithubRepoRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.node_id</code>.
     */
    val NODE_ID: TableField<GithubRepoRecord, String?> = createField(DSL.name("node_id"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.name</code>.
     */
    val NAME: TableField<GithubRepoRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.full_name</code>.
     */
    val FULL_NAME: TableField<GithubRepoRecord, String?> = createField(DSL.name("full_name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.private</code>.
     */
    val PRIVATE: TableField<GithubRepoRecord, Boolean?> = createField(DSL.name("private"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.owner_login</code>.
     */
    val OWNER_LOGIN: TableField<GithubRepoRecord, String?> = createField(DSL.name("owner_login"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.html_url</code>.
     */
    val HTML_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("html_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.description</code>.
     */
    val DESCRIPTION: TableField<GithubRepoRecord, String?> = createField(DSL.name("description"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>datasets.github_repo.fork</code>.
     */
    val FORK: TableField<GithubRepoRecord, Boolean?> = createField(DSL.name("fork"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.url</code>.
     */
    val URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.forks_url</code>.
     */
    val FORKS_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("forks_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.keys_url</code>.
     */
    val KEYS_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("keys_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.collaborators_url</code>.
     */
    val COLLABORATORS_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("collaborators_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.teams_url</code>.
     */
    val TEAMS_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("teams_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.hooks_url</code>.
     */
    val HOOKS_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("hooks_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.issue_events_url</code>.
     */
    val ISSUE_EVENTS_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("issue_events_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.events_url</code>.
     */
    val EVENTS_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("events_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.assignees_url</code>.
     */
    val ASSIGNEES_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("assignees_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.branches_url</code>.
     */
    val BRANCHES_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("branches_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.tags_url</code>.
     */
    val TAGS_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("tags_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.blobs_url</code>.
     */
    val BLOBS_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("blobs_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.git_tags_url</code>.
     */
    val GIT_TAGS_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("git_tags_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.git_refs_url</code>.
     */
    val GIT_REFS_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("git_refs_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.trees_url</code>.
     */
    val TREES_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("trees_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.statuses_url</code>.
     */
    val STATUSES_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("statuses_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.languages_url</code>.
     */
    val LANGUAGES_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("languages_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.stargazers_url</code>.
     */
    val STARGAZERS_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("stargazers_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.contributors_url</code>.
     */
    val CONTRIBUTORS_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("contributors_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.subscribers_url</code>.
     */
    val SUBSCRIBERS_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("subscribers_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.subscription_url</code>.
     */
    val SUBSCRIPTION_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("subscription_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.commits_url</code>.
     */
    val COMMITS_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("commits_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.git_commits_url</code>.
     */
    val GIT_COMMITS_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("git_commits_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.comments_url</code>.
     */
    val COMMENTS_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("comments_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.issue_comment_url</code>.
     */
    val ISSUE_COMMENT_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("issue_comment_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.contents_url</code>.
     */
    val CONTENTS_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("contents_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.compare_url</code>.
     */
    val COMPARE_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("compare_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.merges_url</code>.
     */
    val MERGES_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("merges_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.archive_url</code>.
     */
    val ARCHIVE_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("archive_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.downloads_url</code>.
     */
    val DOWNLOADS_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("downloads_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.issues_url</code>.
     */
    val ISSUES_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("issues_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.pulls_url</code>.
     */
    val PULLS_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("pulls_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.milestones_url</code>.
     */
    val MILESTONES_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("milestones_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.notifications_url</code>.
     */
    val NOTIFICATIONS_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("notifications_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.labels_url</code>.
     */
    val LABELS_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("labels_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.releases_url</code>.
     */
    val RELEASES_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("releases_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.deployments_url</code>.
     */
    val DEPLOYMENTS_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("deployments_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.created_at</code>.
     */
    val CREATED_AT: TableField<GithubRepoRecord, String?> = createField(DSL.name("created_at"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.updated_at</code>.
     */
    val UPDATED_AT: TableField<GithubRepoRecord, String?> = createField(DSL.name("updated_at"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.pushed_at</code>.
     */
    val PUSHED_AT: TableField<GithubRepoRecord, String?> = createField(DSL.name("pushed_at"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.git_url</code>.
     */
    val GIT_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("git_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.ssh_url</code>.
     */
    val SSH_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("ssh_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.clone_url</code>.
     */
    val CLONE_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("clone_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.svn_url</code>.
     */
    val SVN_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("svn_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.homepage</code>.
     */
    val HOMEPAGE: TableField<GithubRepoRecord, String?> = createField(DSL.name("homepage"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>datasets.github_repo.size</code>.
     */
    val SIZE: TableField<GithubRepoRecord, Int?> = createField(DSL.name("size"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.stargazers_count</code>.
     */
    val STARGAZERS_COUNT: TableField<GithubRepoRecord, Int?> = createField(DSL.name("stargazers_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.watchers_count</code>.
     */
    val WATCHERS_COUNT: TableField<GithubRepoRecord, Int?> = createField(DSL.name("watchers_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.language</code>.
     */
    val LANGUAGE: TableField<GithubRepoRecord, String?> = createField(DSL.name("language"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>datasets.github_repo.has_issues</code>.
     */
    val HAS_ISSUES: TableField<GithubRepoRecord, Boolean?> = createField(DSL.name("has_issues"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.has_projects</code>.
     */
    val HAS_PROJECTS: TableField<GithubRepoRecord, Boolean?> = createField(DSL.name("has_projects"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.has_downloads</code>.
     */
    val HAS_DOWNLOADS: TableField<GithubRepoRecord, Boolean?> = createField(DSL.name("has_downloads"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.has_wiki</code>.
     */
    val HAS_WIKI: TableField<GithubRepoRecord, Boolean?> = createField(DSL.name("has_wiki"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.has_pages</code>.
     */
    val HAS_PAGES: TableField<GithubRepoRecord, Boolean?> = createField(DSL.name("has_pages"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.has_discussions</code>.
     */
    val HAS_DISCUSSIONS: TableField<GithubRepoRecord, Boolean?> = createField(DSL.name("has_discussions"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.forks_count</code>.
     */
    val FORKS_COUNT: TableField<GithubRepoRecord, Int?> = createField(DSL.name("forks_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.mirror_url</code>.
     */
    val MIRROR_URL: TableField<GithubRepoRecord, String?> = createField(DSL.name("mirror_url"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>datasets.github_repo.archived</code>.
     */
    val ARCHIVED: TableField<GithubRepoRecord, Boolean?> = createField(DSL.name("archived"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.disabled</code>.
     */
    val DISABLED: TableField<GithubRepoRecord, Boolean?> = createField(DSL.name("disabled"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.open_issues_count</code>.
     */
    val OPEN_ISSUES_COUNT: TableField<GithubRepoRecord, Int?> = createField(DSL.name("open_issues_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.license</code>.
     */
    val LICENSE: TableField<GithubRepoRecord, String?> = createField(DSL.name("license"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>datasets.github_repo.allow_forking</code>.
     */
    val ALLOW_FORKING: TableField<GithubRepoRecord, Boolean?> = createField(DSL.name("allow_forking"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.is_template</code>.
     */
    val IS_TEMPLATE: TableField<GithubRepoRecord, Boolean?> = createField(DSL.name("is_template"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.web_commit_signoff_required</code>.
     */
    val WEB_COMMIT_SIGNOFF_REQUIRED: TableField<GithubRepoRecord, Boolean?> = createField(DSL.name("web_commit_signoff_required"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.visibility</code>.
     */
    val VISIBILITY: TableField<GithubRepoRecord, String?> = createField(DSL.name("visibility"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.forks</code>.
     */
    val FORKS: TableField<GithubRepoRecord, Int?> = createField(DSL.name("forks"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.open_issues</code>.
     */
    val OPEN_ISSUES: TableField<GithubRepoRecord, Int?> = createField(DSL.name("open_issues"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.watchers</code>.
     */
    val WATCHERS: TableField<GithubRepoRecord, Int?> = createField(DSL.name("watchers"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.default_branch</code>.
     */
    val DEFAULT_BRANCH: TableField<GithubRepoRecord, String?> = createField(DSL.name("default_branch"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.temp_clone_token</code>.
     */
    val TEMP_CLONE_TOKEN: TableField<GithubRepoRecord, String?> = createField(DSL.name("temp_clone_token"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>datasets.github_repo.network_count</code>.
     */
    val NETWORK_COUNT: TableField<GithubRepoRecord, Int?> = createField(DSL.name("network_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>datasets.github_repo.subscribers_count</code>.
     */
    val SUBSCRIBERS_COUNT: TableField<GithubRepoRecord, Int?> = createField(DSL.name("subscribers_count"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<GithubRepoRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<GithubRepoRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>datasets.github_repo</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>datasets.github_repo</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>datasets.github_repo</code> table reference
     */
    constructor(): this(DSL.name("github_repo"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, GithubRepoRecord>): this(Internal.createPathAlias(child, key), child, key, GITHUB_REPO, null)
    override fun getSchema(): Schema? = if (aliased()) null else Datasets.DATASETS
    override fun getPrimaryKey(): UniqueKey<GithubRepoRecord> = GITHUB_REPO_PKEY
    override fun getReferences(): List<ForeignKey<GithubRepoRecord, *>> = listOf(GITHUB_REPO__GITHUB_REPO_OWNER_LOGIN_FKEY)

    private lateinit var _githubRepoOwner: GithubRepoOwner

    /**
     * Get the implicit join path to the <code>datasets.github_repo_owner</code>
     * table.
     */
    fun githubRepoOwner(): GithubRepoOwner {
        if (!this::_githubRepoOwner.isInitialized)
            _githubRepoOwner = GithubRepoOwner(this, GITHUB_REPO__GITHUB_REPO_OWNER_LOGIN_FKEY)

        return _githubRepoOwner;
    }

    val githubRepoOwner: GithubRepoOwner
        get(): GithubRepoOwner = githubRepoOwner()
    override fun `as`(alias: String): GithubRepo = GithubRepo(DSL.name(alias), this)
    override fun `as`(alias: Name): GithubRepo = GithubRepo(alias, this)
    override fun `as`(alias: Table<*>): GithubRepo = GithubRepo(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): GithubRepo = GithubRepo(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): GithubRepo = GithubRepo(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): GithubRepo = GithubRepo(name.getQualifiedName(), null)
}
