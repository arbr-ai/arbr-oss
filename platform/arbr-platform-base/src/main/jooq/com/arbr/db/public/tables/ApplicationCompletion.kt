/*
 * This file is generated by jOOQ.
 */
package com.arbr.db.`public`.tables


import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.JSONB
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row14
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ApplicationCompletion(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, com.arbr.db.`public`.tables.records.ApplicationCompletionRecord>?,
    aliased: Table<com.arbr.db.`public`.tables.records.ApplicationCompletionRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<com.arbr.db.`public`.tables.records.ApplicationCompletionRecord>(
    alias,
    com.arbr.db.`public`.Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.application_completion</code>
         */
        val APPLICATION_COMPLETION: ApplicationCompletion = ApplicationCompletion()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<com.arbr.db.`public`.tables.records.ApplicationCompletionRecord> = com.arbr.db.`public`.tables.records.ApplicationCompletionRecord::class.java

    /**
     * The column <code>public.application_completion.cache_key</code>.
     */
    val CACHE_KEY: TableField<com.arbr.db.`public`.tables.records.ApplicationCompletionRecord, String?> = createField(DSL.name("cache_key"), SQLDataType.VARCHAR(511).nullable(false), this, "")

    /**
     * The column <code>public.application_completion.creation_timestamp</code>.
     */
    val CREATION_TIMESTAMP: TableField<com.arbr.db.`public`.tables.records.ApplicationCompletionRecord, Long?> = createField(DSL.name("creation_timestamp"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.application_completion.application_id</code>.
     */
    val APPLICATION_ID: TableField<com.arbr.db.`public`.tables.records.ApplicationCompletionRecord, String?> = createField(DSL.name("application_id"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.application_completion.example_vector_ids</code>.
     */
    val EXAMPLE_VECTOR_IDS: TableField<com.arbr.db.`public`.tables.records.ApplicationCompletionRecord, JSONB?> = createField(DSL.name("example_vector_ids"), SQLDataType.JSONB.nullable(false), this, "")

    /**
     * The column <code>public.application_completion.input_vector_ids</code>.
     */
    val INPUT_VECTOR_IDS: TableField<com.arbr.db.`public`.tables.records.ApplicationCompletionRecord, JSONB?> = createField(DSL.name("input_vector_ids"), SQLDataType.JSONB.nullable(false), this, "")

    /**
     * The column <code>public.application_completion.input_resource</code>.
     */
    val INPUT_RESOURCE: TableField<com.arbr.db.`public`.tables.records.ApplicationCompletionRecord, JSONB?> = createField(DSL.name("input_resource"), SQLDataType.JSONB.nullable(false), this, "")

    /**
     * The column <code>public.application_completion.output_resource</code>.
     */
    val OUTPUT_RESOURCE: TableField<com.arbr.db.`public`.tables.records.ApplicationCompletionRecord, JSONB?> = createField(DSL.name("output_resource"), SQLDataType.JSONB.nullable(false), this, "")

    /**
     * The column <code>public.application_completion.prompt_messages</code>.
     */
    val PROMPT_MESSAGES: TableField<com.arbr.db.`public`.tables.records.ApplicationCompletionRecord, JSONB?> = createField(DSL.name("prompt_messages"), SQLDataType.JSONB.nullable(false), this, "")

    /**
     * The column
     * <code>public.application_completion.completion_messages</code>.
     */
    val COMPLETION_MESSAGES: TableField<com.arbr.db.`public`.tables.records.ApplicationCompletionRecord, JSONB?> = createField(DSL.name("completion_messages"), SQLDataType.JSONB, this, "")

    /**
     * The column <code>public.application_completion.workflow_id</code>.
     */
    val WORKFLOW_ID: TableField<com.arbr.db.`public`.tables.records.ApplicationCompletionRecord, Long?> = createField(DSL.name("workflow_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.application_completion.used_model</code>.
     */
    val USED_MODEL: TableField<com.arbr.db.`public`.tables.records.ApplicationCompletionRecord, String?> = createField(DSL.name("used_model"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.application_completion.prompt_tokens</code>.
     */
    val PROMPT_TOKENS: TableField<com.arbr.db.`public`.tables.records.ApplicationCompletionRecord, Long?> = createField(DSL.name("prompt_tokens"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.application_completion.completion_tokens</code>.
     */
    val COMPLETION_TOKENS: TableField<com.arbr.db.`public`.tables.records.ApplicationCompletionRecord, Long?> = createField(DSL.name("completion_tokens"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.application_completion.total_tokens</code>.
     */
    val TOTAL_TOKENS: TableField<com.arbr.db.`public`.tables.records.ApplicationCompletionRecord, Long?> = createField(DSL.name("total_tokens"), SQLDataType.BIGINT, this, "")

    private constructor(alias: Name, aliased: Table<com.arbr.db.`public`.tables.records.ApplicationCompletionRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<com.arbr.db.`public`.tables.records.ApplicationCompletionRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.application_completion</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.application_completion</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.application_completion</code> table reference
     */
    constructor(): this(DSL.name("application_completion"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, com.arbr.db.`public`.tables.records.ApplicationCompletionRecord>): this(Internal.createPathAlias(child, key), child, key, APPLICATION_COMPLETION, null)
    override fun getSchema(): Schema? = if (aliased()) null else com.arbr.db.`public`.Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<com.arbr.db.`public`.tables.records.ApplicationCompletionRecord> = com.arbr.db.`public`.keys.APPLICATION_COMPLETION_PKEY
    override fun getReferences(): List<ForeignKey<com.arbr.db.`public`.tables.records.ApplicationCompletionRecord, *>> = listOf(com.arbr.db.`public`.keys.APPLICATION_COMPLETION__APPLICATION_COMPLETION_WORKFLOW_ID_FKEY)

    private lateinit var _userProjectWorkflow: com.arbr.db.`public`.tables.UserProjectWorkflow

    /**
     * Get the implicit join path to the
     * <code>public.user_project_workflow</code> table.
     */
    fun userProjectWorkflow(): com.arbr.db.`public`.tables.UserProjectWorkflow {
        if (!this::_userProjectWorkflow.isInitialized)
            _userProjectWorkflow = com.arbr.db.`public`.tables.UserProjectWorkflow(this, com.arbr.db.`public`.keys.APPLICATION_COMPLETION__APPLICATION_COMPLETION_WORKFLOW_ID_FKEY)

        return _userProjectWorkflow;
    }

    val userProjectWorkflow: com.arbr.db.`public`.tables.UserProjectWorkflow
        get(): com.arbr.db.`public`.tables.UserProjectWorkflow = userProjectWorkflow()
    override fun `as`(alias: String): ApplicationCompletion = ApplicationCompletion(DSL.name(alias), this)
    override fun `as`(alias: Name): ApplicationCompletion = ApplicationCompletion(alias, this)
    override fun `as`(alias: Table<*>): ApplicationCompletion = ApplicationCompletion(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ApplicationCompletion = ApplicationCompletion(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ApplicationCompletion = ApplicationCompletion(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ApplicationCompletion = ApplicationCompletion(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row14<String?, Long?, String?, JSONB?, JSONB?, JSONB?, JSONB?, JSONB?, JSONB?, Long?, String?, Long?, Long?, Long?> = super.fieldsRow() as Row14<String?, Long?, String?, JSONB?, JSONB?, JSONB?, JSONB?, JSONB?, JSONB?, Long?, String?, Long?, Long?, Long?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, Long?, String?, JSONB?, JSONB?, JSONB?, JSONB?, JSONB?, JSONB?, Long?, String?, Long?, Long?, Long?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, Long?, String?, JSONB?, JSONB?, JSONB?, JSONB?, JSONB?, JSONB?, Long?, String?, Long?, Long?, Long?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
