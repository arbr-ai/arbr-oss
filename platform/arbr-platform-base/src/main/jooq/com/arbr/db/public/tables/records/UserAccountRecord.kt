/*
 * This file is generated by jOOQ.
 */
package com.arbr.db.`public`.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserAccountRecord private constructor() : UpdatableRecordImpl<UserAccountRecord>(com.arbr.db.`public`.tables.UserAccount.USER_ACCOUNT), Record7<Long?, Long?, String?, String?, String?, Int?, String?> {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var creationTimestamp: Long
        set(value): Unit = set(1, value)
        get(): Long = get(1) as Long

    open var username: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var email: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var passwordKey: String
        set(value): Unit = set(4, value)
        get(): String = get(4) as String

    open var rolesBitmask: Int
        set(value): Unit = set(5, value)
        get(): Int = get(5) as Int

    open var avatarUrl: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row7<Long?, Long?, String?, String?, String?, Int?, String?> = super.fieldsRow() as Row7<Long?, Long?, String?, String?, String?, Int?, String?>
    override fun valuesRow(): Row7<Long?, Long?, String?, String?, String?, Int?, String?> = super.valuesRow() as Row7<Long?, Long?, String?, String?, String?, Int?, String?>
    override fun field1(): Field<Long?> = com.arbr.db.`public`.tables.UserAccount.USER_ACCOUNT.ID
    override fun field2(): Field<Long?> = com.arbr.db.`public`.tables.UserAccount.USER_ACCOUNT.CREATION_TIMESTAMP
    override fun field3(): Field<String?> = com.arbr.db.`public`.tables.UserAccount.USER_ACCOUNT.USERNAME
    override fun field4(): Field<String?> = com.arbr.db.`public`.tables.UserAccount.USER_ACCOUNT.EMAIL
    override fun field5(): Field<String?> = com.arbr.db.`public`.tables.UserAccount.USER_ACCOUNT.PASSWORD_KEY
    override fun field6(): Field<Int?> = com.arbr.db.`public`.tables.UserAccount.USER_ACCOUNT.ROLES_BITMASK
    override fun field7(): Field<String?> = com.arbr.db.`public`.tables.UserAccount.USER_ACCOUNT.AVATAR_URL
    override fun component1(): Long? = id
    override fun component2(): Long = creationTimestamp
    override fun component3(): String? = username
    override fun component4(): String? = email
    override fun component5(): String = passwordKey
    override fun component6(): Int = rolesBitmask
    override fun component7(): String? = avatarUrl
    override fun value1(): Long? = id
    override fun value2(): Long = creationTimestamp
    override fun value3(): String? = username
    override fun value4(): String? = email
    override fun value5(): String = passwordKey
    override fun value6(): Int = rolesBitmask
    override fun value7(): String? = avatarUrl

    override fun value1(value: Long?): UserAccountRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Long?): UserAccountRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): UserAccountRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): UserAccountRecord {
        set(3, value)
        return this
    }

    override fun value5(value: String?): UserAccountRecord {
        set(4, value)
        return this
    }

    override fun value6(value: Int?): UserAccountRecord {
        set(5, value)
        return this
    }

    override fun value7(value: String?): UserAccountRecord {
        set(6, value)
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: String?, value4: String?, value5: String?, value6: Int?, value7: String?): UserAccountRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        return this
    }

    /**
     * Create a detached, initialised UserAccountRecord
     */
    constructor(id: Long? = null, creationTimestamp: Long, username: String? = null, email: String? = null, passwordKey: String, rolesBitmask: Int, avatarUrl: String? = null): this() {
        this.id = id
        this.creationTimestamp = creationTimestamp
        this.username = username
        this.email = email
        this.passwordKey = passwordKey
        this.rolesBitmask = rolesBitmask
        this.avatarUrl = avatarUrl
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised UserAccountRecord
     */
    constructor(value: com.arbr.db.`public`.tables.pojos.UserAccount?): this() {
        if (value != null) {
            this.id = value.id
            this.creationTimestamp = value.creationTimestamp
            this.username = value.username
            this.email = value.email
            this.passwordKey = value.passwordKey
            this.rolesBitmask = value.rolesBitmask
            this.avatarUrl = value.avatarUrl
            resetChangedOnNotNull()
        }
    }
}
