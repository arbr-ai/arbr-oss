/*
 * This file is generated by jOOQ.
 */
package com.arbr.db.datasets.tables


import com.arbr.db.datasets.Datasets
import com.arbr.db.datasets.keys.GITHUB_COMMIT_STATS__GITHUB_COMMIT_STATS_COMMIT_INFO_SHA_FKEY
import com.arbr.db.datasets.tables.records.GithubCommitStatsRecord

import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row4
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GithubCommitStats(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, GithubCommitStatsRecord>?,
    aliased: Table<GithubCommitStatsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<GithubCommitStatsRecord>(
    alias,
    Datasets.DATASETS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>datasets.github_commit_stats</code>
         */
        val GITHUB_COMMIT_STATS: GithubCommitStats = GithubCommitStats()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<GithubCommitStatsRecord> = GithubCommitStatsRecord::class.java

    /**
     * The column <code>datasets.github_commit_stats.total</code>.
     */
    val TOTAL: TableField<GithubCommitStatsRecord, Long?> = createField(DSL.name("total"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>datasets.github_commit_stats.additions</code>.
     */
    val ADDITIONS: TableField<GithubCommitStatsRecord, Long?> = createField(DSL.name("additions"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>datasets.github_commit_stats.deletions</code>.
     */
    val DELETIONS: TableField<GithubCommitStatsRecord, Long?> = createField(DSL.name("deletions"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>datasets.github_commit_stats.commit_info_sha</code>.
     */
    val COMMIT_INFO_SHA: TableField<GithubCommitStatsRecord, String?> = createField(DSL.name("commit_info_sha"), SQLDataType.VARCHAR(40).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<GithubCommitStatsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<GithubCommitStatsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>datasets.github_commit_stats</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>datasets.github_commit_stats</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>datasets.github_commit_stats</code> table reference
     */
    constructor(): this(DSL.name("github_commit_stats"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, GithubCommitStatsRecord>): this(Internal.createPathAlias(child, key), child, key, GITHUB_COMMIT_STATS, null)
    override fun getSchema(): Schema? = if (aliased()) null else Datasets.DATASETS
    override fun getReferences(): List<ForeignKey<GithubCommitStatsRecord, *>> = listOf(GITHUB_COMMIT_STATS__GITHUB_COMMIT_STATS_COMMIT_INFO_SHA_FKEY)

    private lateinit var _githubCommit: GithubCommit

    /**
     * Get the implicit join path to the <code>datasets.github_commit</code>
     * table.
     */
    fun githubCommit(): GithubCommit {
        if (!this::_githubCommit.isInitialized)
            _githubCommit = GithubCommit(this, GITHUB_COMMIT_STATS__GITHUB_COMMIT_STATS_COMMIT_INFO_SHA_FKEY)

        return _githubCommit;
    }

    val githubCommit: GithubCommit
        get(): GithubCommit = githubCommit()
    override fun `as`(alias: String): GithubCommitStats = GithubCommitStats(DSL.name(alias), this)
    override fun `as`(alias: Name): GithubCommitStats = GithubCommitStats(alias, this)
    override fun `as`(alias: Table<*>): GithubCommitStats = GithubCommitStats(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): GithubCommitStats = GithubCommitStats(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): GithubCommitStats = GithubCommitStats(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): GithubCommitStats = GithubCommitStats(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row4<Long?, Long?, Long?, String?> = super.fieldsRow() as Row4<Long?, Long?, Long?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, Long?, Long?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, Long?, Long?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
