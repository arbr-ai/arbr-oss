/*
 * This file is generated by jOOQ.
 */
package com.arbr.db.datasets.tables


import com.arbr.db.datasets.Datasets
import com.arbr.db.datasets.keys.GITHUB_FILE_PARSE_TOKEN_PKEY
import com.arbr.db.datasets.tables.records.GithubFileParseTokenRecord

import java.util.function.Function

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row10
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GithubFileParseToken(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, GithubFileParseTokenRecord>?,
    aliased: Table<GithubFileParseTokenRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<GithubFileParseTokenRecord>(
    alias,
    Datasets.DATASETS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>datasets.github_file_parse_token</code>
         */
        val GITHUB_FILE_PARSE_TOKEN: GithubFileParseToken = GithubFileParseToken()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<GithubFileParseTokenRecord> = GithubFileParseTokenRecord::class.java

    /**
     * The column <code>datasets.github_file_parse_token.id</code>.
     */
    val ID: TableField<GithubFileParseTokenRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>datasets.github_file_parse_token.type</code>.
     */
    val TYPE: TableField<GithubFileParseTokenRecord, Int?> = createField(DSL.name("type"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>datasets.github_file_parse_token.text</code>.
     */
    val TEXT: TableField<GithubFileParseTokenRecord, String?> = createField(DSL.name("text"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>datasets.github_file_parse_token.line</code>.
     */
    val LINE: TableField<GithubFileParseTokenRecord, Int?> = createField(DSL.name("line"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column
     * <code>datasets.github_file_parse_token.char_position_in_line</code>.
     */
    val CHAR_POSITION_IN_LINE: TableField<GithubFileParseTokenRecord, Int?> = createField(DSL.name("char_position_in_line"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>datasets.github_file_parse_token.channel</code>.
     */
    val CHANNEL: TableField<GithubFileParseTokenRecord, Int?> = createField(DSL.name("channel"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>datasets.github_file_parse_token.token_index</code>.
     */
    val TOKEN_INDEX: TableField<GithubFileParseTokenRecord, Int?> = createField(DSL.name("token_index"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>datasets.github_file_parse_token.start_index</code>.
     */
    val START_INDEX: TableField<GithubFileParseTokenRecord, Int?> = createField(DSL.name("start_index"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>datasets.github_file_parse_token.stop_index</code>.
     */
    val STOP_INDEX: TableField<GithubFileParseTokenRecord, Int?> = createField(DSL.name("stop_index"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>datasets.github_file_parse_token.locus</code>.
     */
    val LOCUS: TableField<GithubFileParseTokenRecord, Int?> = createField(DSL.name("locus"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<GithubFileParseTokenRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<GithubFileParseTokenRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>datasets.github_file_parse_token</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>datasets.github_file_parse_token</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>datasets.github_file_parse_token</code> table reference
     */
    constructor(): this(DSL.name("github_file_parse_token"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, GithubFileParseTokenRecord>): this(Internal.createPathAlias(child, key), child, key, GITHUB_FILE_PARSE_TOKEN, null)
    override fun getSchema(): Schema? = if (aliased()) null else Datasets.DATASETS
    override fun getIdentity(): Identity<GithubFileParseTokenRecord, Long?> = super.getIdentity() as Identity<GithubFileParseTokenRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<GithubFileParseTokenRecord> = GITHUB_FILE_PARSE_TOKEN_PKEY
    override fun `as`(alias: String): GithubFileParseToken = GithubFileParseToken(DSL.name(alias), this)
    override fun `as`(alias: Name): GithubFileParseToken = GithubFileParseToken(alias, this)
    override fun `as`(alias: Table<*>): GithubFileParseToken = GithubFileParseToken(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): GithubFileParseToken = GithubFileParseToken(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): GithubFileParseToken = GithubFileParseToken(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): GithubFileParseToken = GithubFileParseToken(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row10<Long?, Int?, String?, Int?, Int?, Int?, Int?, Int?, Int?, Int?> = super.fieldsRow() as Row10<Long?, Int?, String?, Int?, Int?, Int?, Int?, Int?, Int?, Int?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, Int?, String?, Int?, Int?, Int?, Int?, Int?, Int?, Int?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, Int?, String?, Int?, Int?, Int?, Int?, Int?, Int?, Int?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
