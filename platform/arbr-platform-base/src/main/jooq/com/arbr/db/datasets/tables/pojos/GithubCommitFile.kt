/*
 * This file is generated by jOOQ.
 */
package com.arbr.db.datasets.tables.pojos


import java.io.Serializable


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
data class GithubCommitFile(
    val sha: String? = null,
    val filename: String,
    val status: String,
    val additions: Long,
    val deletions: Long,
    val changes: Long,
    val blobUrl: String? = null,
    val rawUrl: String? = null,
    val contentsUrl: String,
    val patch: String? = null,
    val previousFilename: String? = null,
    val commitInfoSha: String
): Serializable {

    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true
        if (other == null)
            return false
        if (this::class != other::class)
            return false
        val o: GithubCommitFile = other as GithubCommitFile
        if (this.sha == null) {
            if (o.sha != null)
                return false
        }
        else if (this.sha != o.sha)
            return false
        if (this.filename != o.filename)
            return false
        if (this.status != o.status)
            return false
        if (this.additions != o.additions)
            return false
        if (this.deletions != o.deletions)
            return false
        if (this.changes != o.changes)
            return false
        if (this.blobUrl == null) {
            if (o.blobUrl != null)
                return false
        }
        else if (this.blobUrl != o.blobUrl)
            return false
        if (this.rawUrl == null) {
            if (o.rawUrl != null)
                return false
        }
        else if (this.rawUrl != o.rawUrl)
            return false
        if (this.contentsUrl != o.contentsUrl)
            return false
        if (this.patch == null) {
            if (o.patch != null)
                return false
        }
        else if (this.patch != o.patch)
            return false
        if (this.previousFilename == null) {
            if (o.previousFilename != null)
                return false
        }
        else if (this.previousFilename != o.previousFilename)
            return false
        if (this.commitInfoSha != o.commitInfoSha)
            return false
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + (if (this.sha == null) 0 else this.sha.hashCode())
        result = prime * result + this.filename.hashCode()
        result = prime * result + this.status.hashCode()
        result = prime * result + this.additions.hashCode()
        result = prime * result + this.deletions.hashCode()
        result = prime * result + this.changes.hashCode()
        result = prime * result + (if (this.blobUrl == null) 0 else this.blobUrl.hashCode())
        result = prime * result + (if (this.rawUrl == null) 0 else this.rawUrl.hashCode())
        result = prime * result + this.contentsUrl.hashCode()
        result = prime * result + (if (this.patch == null) 0 else this.patch.hashCode())
        result = prime * result + (if (this.previousFilename == null) 0 else this.previousFilename.hashCode())
        result = prime * result + this.commitInfoSha.hashCode()
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("GithubCommitFile (")

        sb.append(sha)
        sb.append(", ").append(filename)
        sb.append(", ").append(status)
        sb.append(", ").append(additions)
        sb.append(", ").append(deletions)
        sb.append(", ").append(changes)
        sb.append(", ").append(blobUrl)
        sb.append(", ").append(rawUrl)
        sb.append(", ").append(contentsUrl)
        sb.append(", ").append(patch)
        sb.append(", ").append(previousFilename)
        sb.append(", ").append(commitInfoSha)

        sb.append(")")
        return sb.toString()
    }
}
