/*
 * This file is generated by jOOQ.
 */
package com.arbr.db.`public`.tables


import java.util.function.Function

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.JSONB
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row14
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * Input-Output pairs of Embedded Resources
 */
@Suppress("UNCHECKED_CAST")
open class EmbeddedResourcePair(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, com.arbr.db.`public`.tables.records.EmbeddedResourcePairRecord>?,
    aliased: Table<com.arbr.db.`public`.tables.records.EmbeddedResourcePairRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<com.arbr.db.`public`.tables.records.EmbeddedResourcePairRecord>(
    alias,
    com.arbr.db.`public`.Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("Input-Output pairs of Embedded Resources"),
    TableOptions.view("""
    create view "embedded_resource_pair" as  SELECT ir.id AS input_resource_id,
     ir.creation_timestamp AS input_creation_timestamp,
     ir.schema_id AS input_schema_id,
     ir.resource_object AS input_resource_object,
     ir.chat_messages AS input_chat_messages,
     ec.vector_id,
     ec.kind AS embedding_kind,
     ec.embedding_content,
     ec.metadata,
     ir2.id AS output_resource_id,
     ir2.creation_timestamp AS output_creation_timestamp,
     ir2.schema_id AS output_schema_id,
     ir2.resource_object AS output_resource_object,
     ir2.chat_messages AS output_chat_messages
    FROM (((io_pair
      JOIN indexed_resource ir ON ((ir.id = io_pair.input_resource_id)))
      JOIN indexed_resource ir2 ON ((ir2.id = io_pair.output_resource_id)))
      JOIN embedded_content ec ON ((ir.id = ec.resource_id)));
    """)
) {
    companion object {

        /**
         * The reference instance of <code>public.embedded_resource_pair</code>
         */
        val EMBEDDED_RESOURCE_PAIR: EmbeddedResourcePair = EmbeddedResourcePair()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<com.arbr.db.`public`.tables.records.EmbeddedResourcePairRecord> = com.arbr.db.`public`.tables.records.EmbeddedResourcePairRecord::class.java

    /**
     * The column <code>public.embedded_resource_pair.input_resource_id</code>.
     */
    val INPUT_RESOURCE_ID: TableField<com.arbr.db.`public`.tables.records.EmbeddedResourcePairRecord, Long?> = createField(DSL.name("input_resource_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>public.embedded_resource_pair.input_creation_timestamp</code>.
     */
    val INPUT_CREATION_TIMESTAMP: TableField<com.arbr.db.`public`.tables.records.EmbeddedResourcePairRecord, Long?> = createField(DSL.name("input_creation_timestamp"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.embedded_resource_pair.input_schema_id</code>.
     */
    val INPUT_SCHEMA_ID: TableField<com.arbr.db.`public`.tables.records.EmbeddedResourcePairRecord, String?> = createField(DSL.name("input_schema_id"), SQLDataType.VARCHAR(511), this, "")

    /**
     * The column
     * <code>public.embedded_resource_pair.input_resource_object</code>.
     */
    val INPUT_RESOURCE_OBJECT: TableField<com.arbr.db.`public`.tables.records.EmbeddedResourcePairRecord, JSONB?> = createField(DSL.name("input_resource_object"), SQLDataType.JSONB, this, "")

    /**
     * The column
     * <code>public.embedded_resource_pair.input_chat_messages</code>.
     */
    val INPUT_CHAT_MESSAGES: TableField<com.arbr.db.`public`.tables.records.EmbeddedResourcePairRecord, JSONB?> = createField(DSL.name("input_chat_messages"), SQLDataType.JSONB, this, "")

    /**
     * The column <code>public.embedded_resource_pair.vector_id</code>.
     */
    val VECTOR_ID: TableField<com.arbr.db.`public`.tables.records.EmbeddedResourcePairRecord, String?> = createField(DSL.name("vector_id"), SQLDataType.VARCHAR(511), this, "")

    /**
     * The column <code>public.embedded_resource_pair.embedding_kind</code>.
     */
    val EMBEDDING_KIND: TableField<com.arbr.db.`public`.tables.records.EmbeddedResourcePairRecord, String?> = createField(DSL.name("embedding_kind"), SQLDataType.VARCHAR(511), this, "")

    /**
     * The column <code>public.embedded_resource_pair.embedding_content</code>.
     */
    val EMBEDDING_CONTENT: TableField<com.arbr.db.`public`.tables.records.EmbeddedResourcePairRecord, String?> = createField(DSL.name("embedding_content"), SQLDataType.VARCHAR(65535), this, "")

    /**
     * The column <code>public.embedded_resource_pair.metadata</code>.
     */
    val METADATA: TableField<com.arbr.db.`public`.tables.records.EmbeddedResourcePairRecord, JSONB?> = createField(DSL.name("metadata"), SQLDataType.JSONB, this, "")

    /**
     * The column <code>public.embedded_resource_pair.output_resource_id</code>.
     */
    val OUTPUT_RESOURCE_ID: TableField<com.arbr.db.`public`.tables.records.EmbeddedResourcePairRecord, Long?> = createField(DSL.name("output_resource_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>public.embedded_resource_pair.output_creation_timestamp</code>.
     */
    val OUTPUT_CREATION_TIMESTAMP: TableField<com.arbr.db.`public`.tables.records.EmbeddedResourcePairRecord, Long?> = createField(DSL.name("output_creation_timestamp"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.embedded_resource_pair.output_schema_id</code>.
     */
    val OUTPUT_SCHEMA_ID: TableField<com.arbr.db.`public`.tables.records.EmbeddedResourcePairRecord, String?> = createField(DSL.name("output_schema_id"), SQLDataType.VARCHAR(511), this, "")

    /**
     * The column
     * <code>public.embedded_resource_pair.output_resource_object</code>.
     */
    val OUTPUT_RESOURCE_OBJECT: TableField<com.arbr.db.`public`.tables.records.EmbeddedResourcePairRecord, JSONB?> = createField(DSL.name("output_resource_object"), SQLDataType.JSONB, this, "")

    /**
     * The column
     * <code>public.embedded_resource_pair.output_chat_messages</code>.
     */
    val OUTPUT_CHAT_MESSAGES: TableField<com.arbr.db.`public`.tables.records.EmbeddedResourcePairRecord, JSONB?> = createField(DSL.name("output_chat_messages"), SQLDataType.JSONB, this, "")

    private constructor(alias: Name, aliased: Table<com.arbr.db.`public`.tables.records.EmbeddedResourcePairRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<com.arbr.db.`public`.tables.records.EmbeddedResourcePairRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.embedded_resource_pair</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.embedded_resource_pair</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.embedded_resource_pair</code> table reference
     */
    constructor(): this(DSL.name("embedded_resource_pair"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, com.arbr.db.`public`.tables.records.EmbeddedResourcePairRecord>): this(Internal.createPathAlias(child, key), child, key, EMBEDDED_RESOURCE_PAIR, null)
    override fun getSchema(): Schema? = if (aliased()) null else com.arbr.db.`public`.Public.PUBLIC
    override fun `as`(alias: String): EmbeddedResourcePair = EmbeddedResourcePair(DSL.name(alias), this)
    override fun `as`(alias: Name): EmbeddedResourcePair = EmbeddedResourcePair(alias, this)
    override fun `as`(alias: Table<*>): EmbeddedResourcePair = EmbeddedResourcePair(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): EmbeddedResourcePair = EmbeddedResourcePair(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): EmbeddedResourcePair = EmbeddedResourcePair(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): EmbeddedResourcePair = EmbeddedResourcePair(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row14<Long?, Long?, String?, JSONB?, JSONB?, String?, String?, String?, JSONB?, Long?, Long?, String?, JSONB?, JSONB?> = super.fieldsRow() as Row14<Long?, Long?, String?, JSONB?, JSONB?, String?, String?, String?, JSONB?, Long?, Long?, String?, JSONB?, JSONB?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, Long?, String?, JSONB?, JSONB?, String?, String?, String?, JSONB?, Long?, Long?, String?, JSONB?, JSONB?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, Long?, String?, JSONB?, JSONB?, String?, String?, String?, JSONB?, Long?, Long?, String?, JSONB?, JSONB?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
