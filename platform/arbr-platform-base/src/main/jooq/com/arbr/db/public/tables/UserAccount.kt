/*
 * This file is generated by jOOQ.
 */
package com.arbr.db.`public`.tables


import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row7
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserAccount(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, com.arbr.db.`public`.tables.records.UserAccountRecord>?,
    aliased: Table<com.arbr.db.`public`.tables.records.UserAccountRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<com.arbr.db.`public`.tables.records.UserAccountRecord>(
    alias,
    com.arbr.db.`public`.Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.user_account</code>
         */
        val USER_ACCOUNT: UserAccount = UserAccount()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<com.arbr.db.`public`.tables.records.UserAccountRecord> = com.arbr.db.`public`.tables.records.UserAccountRecord::class.java

    /**
     * The column <code>public.user_account.id</code>.
     */
    val ID: TableField<com.arbr.db.`public`.tables.records.UserAccountRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.user_account.creation_timestamp</code>.
     */
    val CREATION_TIMESTAMP: TableField<com.arbr.db.`public`.tables.records.UserAccountRecord, Long?> = createField(DSL.name("creation_timestamp"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.user_account.username</code>.
     */
    val USERNAME: TableField<com.arbr.db.`public`.tables.records.UserAccountRecord, String?> = createField(DSL.name("username"), SQLDataType.VARCHAR(63), this, "")

    /**
     * The column <code>public.user_account.email</code>.
     */
    val EMAIL: TableField<com.arbr.db.`public`.tables.records.UserAccountRecord, String?> = createField(DSL.name("email"), SQLDataType.VARCHAR(511), this, "")

    /**
     * The column <code>public.user_account.password_key</code>.
     */
    val PASSWORD_KEY: TableField<com.arbr.db.`public`.tables.records.UserAccountRecord, String?> = createField(DSL.name("password_key"), SQLDataType.VARCHAR(65535).nullable(false), this, "")

    /**
     * The column <code>public.user_account.roles_bitmask</code>.
     */
    val ROLES_BITMASK: TableField<com.arbr.db.`public`.tables.records.UserAccountRecord, Int?> = createField(DSL.name("roles_bitmask"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.user_account.avatar_url</code>.
     */
    val AVATAR_URL: TableField<com.arbr.db.`public`.tables.records.UserAccountRecord, String?> = createField(DSL.name("avatar_url"), SQLDataType.VARCHAR(511), this, "")

    private constructor(alias: Name, aliased: Table<com.arbr.db.`public`.tables.records.UserAccountRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<com.arbr.db.`public`.tables.records.UserAccountRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.user_account</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.user_account</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.user_account</code> table reference
     */
    constructor(): this(DSL.name("user_account"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, com.arbr.db.`public`.tables.records.UserAccountRecord>): this(Internal.createPathAlias(child, key), child, key, USER_ACCOUNT, null)
    override fun getSchema(): Schema? = if (aliased()) null else com.arbr.db.`public`.Public.PUBLIC
    override fun getIdentity(): Identity<com.arbr.db.`public`.tables.records.UserAccountRecord, Long?> = super.getIdentity() as Identity<com.arbr.db.`public`.tables.records.UserAccountRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<com.arbr.db.`public`.tables.records.UserAccountRecord> = com.arbr.db.`public`.keys.USER_ACCOUNT_PKEY
    override fun getUniqueKeys(): List<UniqueKey<com.arbr.db.`public`.tables.records.UserAccountRecord>> = listOf(com.arbr.db.`public`.keys.USER_ACCOUNT_USERNAME_KEY, com.arbr.db.`public`.keys.USER_ACCOUNT_EMAIL_KEY)
    override fun `as`(alias: String): UserAccount = UserAccount(DSL.name(alias), this)
    override fun `as`(alias: Name): UserAccount = UserAccount(alias, this)
    override fun `as`(alias: Table<*>): UserAccount = UserAccount(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): UserAccount = UserAccount(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): UserAccount = UserAccount(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): UserAccount = UserAccount(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row7<Long?, Long?, String?, String?, String?, Int?, String?> = super.fieldsRow() as Row7<Long?, Long?, String?, String?, String?, Int?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, Long?, String?, String?, String?, Int?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, Long?, String?, String?, String?, Int?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
