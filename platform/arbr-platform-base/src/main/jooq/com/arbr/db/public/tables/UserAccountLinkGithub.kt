/*
 * This file is generated by jOOQ.
 */
package com.arbr.db.`public`.tables


import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row5
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserAccountLinkGithub(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, com.arbr.db.`public`.tables.records.UserAccountLinkGithubRecord>?,
    aliased: Table<com.arbr.db.`public`.tables.records.UserAccountLinkGithubRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<com.arbr.db.`public`.tables.records.UserAccountLinkGithubRecord>(
    alias,
    com.arbr.db.`public`.Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>public.user_account_link_github</code>
         */
        val USER_ACCOUNT_LINK_GITHUB: UserAccountLinkGithub = UserAccountLinkGithub()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<com.arbr.db.`public`.tables.records.UserAccountLinkGithubRecord> = com.arbr.db.`public`.tables.records.UserAccountLinkGithubRecord::class.java

    /**
     * The column
     * <code>public.user_account_link_github.creation_timestamp</code>.
     */
    val CREATION_TIMESTAMP: TableField<com.arbr.db.`public`.tables.records.UserAccountLinkGithubRecord, Long?> = createField(DSL.name("creation_timestamp"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.user_account_link_github.github_id</code>.
     */
    val GITHUB_ID: TableField<com.arbr.db.`public`.tables.records.UserAccountLinkGithubRecord, String?> = createField(DSL.name("github_id"), SQLDataType.VARCHAR(65535), this, "")

    /**
     * The column <code>public.user_account_link_github.github_key</code>.
     */
    val GITHUB_KEY: TableField<com.arbr.db.`public`.tables.records.UserAccountLinkGithubRecord, String?> = createField(DSL.name("github_key"), SQLDataType.VARCHAR(65535), this, "")

    /**
     * The column <code>public.user_account_link_github.github_app_name</code>.
     */
    val GITHUB_APP_NAME: TableField<com.arbr.db.`public`.tables.records.UserAccountLinkGithubRecord, String?> = createField(DSL.name("github_app_name"), SQLDataType.VARCHAR(511), this, "")

    /**
     * The column <code>public.user_account_link_github.user_id</code>.
     */
    val USER_ID: TableField<com.arbr.db.`public`.tables.records.UserAccountLinkGithubRecord, Long?> = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<com.arbr.db.`public`.tables.records.UserAccountLinkGithubRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<com.arbr.db.`public`.tables.records.UserAccountLinkGithubRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.user_account_link_github</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.user_account_link_github</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.user_account_link_github</code> table reference
     */
    constructor(): this(DSL.name("user_account_link_github"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, com.arbr.db.`public`.tables.records.UserAccountLinkGithubRecord>): this(Internal.createPathAlias(child, key), child, key, USER_ACCOUNT_LINK_GITHUB, null)
    override fun getSchema(): Schema? = if (aliased()) null else com.arbr.db.`public`.Public.PUBLIC
    override fun getReferences(): List<ForeignKey<com.arbr.db.`public`.tables.records.UserAccountLinkGithubRecord, *>> = listOf(com.arbr.db.`public`.keys.USER_ACCOUNT_LINK_GITHUB__USER_ACCOUNT_LINK_GITHUB_USER_ID_FKEY)

    private lateinit var _userAccount: com.arbr.db.`public`.tables.UserAccount

    /**
     * Get the implicit join path to the <code>public.user_account</code> table.
     */
    fun userAccount(): com.arbr.db.`public`.tables.UserAccount {
        if (!this::_userAccount.isInitialized)
            _userAccount = com.arbr.db.`public`.tables.UserAccount(this, com.arbr.db.`public`.keys.USER_ACCOUNT_LINK_GITHUB__USER_ACCOUNT_LINK_GITHUB_USER_ID_FKEY)

        return _userAccount;
    }

    val userAccount: com.arbr.db.`public`.tables.UserAccount
        get(): com.arbr.db.`public`.tables.UserAccount = userAccount()
    override fun `as`(alias: String): UserAccountLinkGithub = UserAccountLinkGithub(DSL.name(alias), this)
    override fun `as`(alias: Name): UserAccountLinkGithub = UserAccountLinkGithub(alias, this)
    override fun `as`(alias: Table<*>): UserAccountLinkGithub = UserAccountLinkGithub(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): UserAccountLinkGithub = UserAccountLinkGithub(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): UserAccountLinkGithub = UserAccountLinkGithub(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): UserAccountLinkGithub = UserAccountLinkGithub(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row5<Long?, String?, String?, String?, Long?> = super.fieldsRow() as Row5<Long?, String?, String?, String?, Long?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, String?, String?, String?, Long?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, String?, String?, String?, Long?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
