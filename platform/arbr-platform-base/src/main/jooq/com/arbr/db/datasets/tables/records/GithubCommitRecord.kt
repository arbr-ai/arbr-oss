/*
 * This file is generated by jOOQ.
 */
package com.arbr.db.datasets.tables.records


import com.arbr.db.datasets.tables.GithubCommit

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GithubCommitRecord private constructor() : UpdatableRecordImpl<GithubCommitRecord>(GithubCommit.GITHUB_COMMIT), Record2<String?, Long?> {

    open var sha: String
        set(value): Unit = set(0, value)
        get(): String = get(0) as String

    open var pullRequestId: Long
        set(value): Unit = set(1, value)
        get(): Long = get(1) as Long

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<String?, Long?> = super.fieldsRow() as Row2<String?, Long?>
    override fun valuesRow(): Row2<String?, Long?> = super.valuesRow() as Row2<String?, Long?>
    override fun field1(): Field<String?> = GithubCommit.GITHUB_COMMIT.SHA
    override fun field2(): Field<Long?> = GithubCommit.GITHUB_COMMIT.PULL_REQUEST_ID
    override fun component1(): String = sha
    override fun component2(): Long = pullRequestId
    override fun value1(): String = sha
    override fun value2(): Long = pullRequestId

    override fun value1(value: String?): GithubCommitRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Long?): GithubCommitRecord {
        set(1, value)
        return this
    }

    override fun values(value1: String?, value2: Long?): GithubCommitRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised GithubCommitRecord
     */
    constructor(sha: String, pullRequestId: Long): this() {
        this.sha = sha
        this.pullRequestId = pullRequestId
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised GithubCommitRecord
     */
    constructor(value: com.arbr.db.datasets.tables.pojos.GithubCommit?): this() {
        if (value != null) {
            this.sha = value.sha
            this.pullRequestId = value.pullRequestId
            resetChangedOnNotNull()
        }
    }
}
