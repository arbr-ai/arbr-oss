/*
 * This file is generated by jOOQ.
 */
package com.arbr.db.`public`.routines.references


import com.arbr.db.binding.Vector1536

import java.math.BigDecimal

import org.jooq.AggregateFunction
import org.jooq.Configuration
import org.jooq.Field



/**
 * Call <code>public.array_to_vector</code>
 */
fun arrayToVector1(
      configuration: Configuration
    , __1: Array<Int?>?
    , __2: Int?
    , __3: Boolean?
): Vector1536? {
    val f = com.arbr.db.`public`.routines.ArrayToVector1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.array_to_vector</code> as a field.
 */
fun arrayToVector1(
      __1: Array<Int?>?
    , __2: Int?
    , __3: Boolean?
): Field<Vector1536?> {
    val f = com.arbr.db.`public`.routines.ArrayToVector1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>public.array_to_vector</code> as a field.
 */
fun arrayToVector1(
      __1: Field<Array<Int?>?>
    , __2: Field<Int?>
    , __3: Field<Boolean?>
): Field<Vector1536?> {
    val f = com.arbr.db.`public`.routines.ArrayToVector1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>public.array_to_vector</code>
 */
fun arrayToVector2(
      configuration: Configuration
    , __1: Array<Float?>?
    , __2: Int?
    , __3: Boolean?
): Vector1536? {
    val f = com.arbr.db.`public`.routines.ArrayToVector2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.array_to_vector</code> as a field.
 */
fun arrayToVector2(
      __1: Array<Float?>?
    , __2: Int?
    , __3: Boolean?
): Field<Vector1536?> {
    val f = com.arbr.db.`public`.routines.ArrayToVector2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>public.array_to_vector</code> as a field.
 */
fun arrayToVector2(
      __1: Field<Array<Float?>?>
    , __2: Field<Int?>
    , __3: Field<Boolean?>
): Field<Vector1536?> {
    val f = com.arbr.db.`public`.routines.ArrayToVector2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>public.array_to_vector</code>
 */
fun arrayToVector3(
      configuration: Configuration
    , __1: Array<Double?>?
    , __2: Int?
    , __3: Boolean?
): Vector1536? {
    val f = com.arbr.db.`public`.routines.ArrayToVector3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.array_to_vector</code> as a field.
 */
fun arrayToVector3(
      __1: Array<Double?>?
    , __2: Int?
    , __3: Boolean?
): Field<Vector1536?> {
    val f = com.arbr.db.`public`.routines.ArrayToVector3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>public.array_to_vector</code> as a field.
 */
fun arrayToVector3(
      __1: Field<Array<Double?>?>
    , __2: Field<Int?>
    , __3: Field<Boolean?>
): Field<Vector1536?> {
    val f = com.arbr.db.`public`.routines.ArrayToVector3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>public.array_to_vector</code>
 */
fun arrayToVector4(
      configuration: Configuration
    , __1: Array<BigDecimal?>?
    , __2: Int?
    , __3: Boolean?
): Vector1536? {
    val f = com.arbr.db.`public`.routines.ArrayToVector4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.array_to_vector</code> as a field.
 */
fun arrayToVector4(
      __1: Array<BigDecimal?>?
    , __2: Int?
    , __3: Boolean?
): Field<Vector1536?> {
    val f = com.arbr.db.`public`.routines.ArrayToVector4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>public.array_to_vector</code> as a field.
 */
fun arrayToVector4(
      __1: Field<Array<BigDecimal?>?>
    , __2: Field<Int?>
    , __3: Field<Boolean?>
): Field<Vector1536?> {
    val f = com.arbr.db.`public`.routines.ArrayToVector4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>public.avg</code> as a field.
 */
fun avg(
      __1: Vector1536?
): AggregateFunction<Vector1536?> {
    val f = com.arbr.db.`public`.routines.Avg()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>public.avg</code> as a field.
 */
fun avg(
      __1: Field<Vector1536?>
): AggregateFunction<Vector1536?> {
    val f = com.arbr.db.`public`.routines.Avg()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Call <code>public.cosine_distance</code>
 */
fun cosineDistance(
      configuration: Configuration
    , __1: Vector1536?
    , __2: Vector1536?
): Double? {
    val f = com.arbr.db.`public`.routines.CosineDistance()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.cosine_distance</code> as a field.
 */
fun cosineDistance(
      __1: Vector1536?
    , __2: Vector1536?
): Field<Double?> {
    val f = com.arbr.db.`public`.routines.CosineDistance()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>public.cosine_distance</code> as a field.
 */
fun cosineDistance(
      __1: Field<Vector1536?>
    , __2: Field<Vector1536?>
): Field<Double?> {
    val f = com.arbr.db.`public`.routines.CosineDistance()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>public.inner_product</code>
 */
fun innerProduct(
      configuration: Configuration
    , __1: Vector1536?
    , __2: Vector1536?
): Double? {
    val f = com.arbr.db.`public`.routines.InnerProduct()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.inner_product</code> as a field.
 */
fun innerProduct(
      __1: Vector1536?
    , __2: Vector1536?
): Field<Double?> {
    val f = com.arbr.db.`public`.routines.InnerProduct()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>public.inner_product</code> as a field.
 */
fun innerProduct(
      __1: Field<Vector1536?>
    , __2: Field<Vector1536?>
): Field<Double?> {
    val f = com.arbr.db.`public`.routines.InnerProduct()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ivfflathandler(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = com.arbr.db.`public`.routines.Ivfflathandler()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ivfflathandler(
      __1: Any?
): Field<Any?> {
    val f = com.arbr.db.`public`.routines.Ivfflathandler()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ivfflathandler(
      __1: Field<Any?>
): Field<Any?> {
    val f = com.arbr.db.`public`.routines.Ivfflathandler()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>public.l2_distance</code>
 */
fun l2Distance(
      configuration: Configuration
    , __1: Vector1536?
    , __2: Vector1536?
): Double? {
    val f = com.arbr.db.`public`.routines.L2Distance()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.l2_distance</code> as a field.
 */
fun l2Distance(
      __1: Vector1536?
    , __2: Vector1536?
): Field<Double?> {
    val f = com.arbr.db.`public`.routines.L2Distance()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>public.l2_distance</code> as a field.
 */
fun l2Distance(
      __1: Field<Vector1536?>
    , __2: Field<Vector1536?>
): Field<Double?> {
    val f = com.arbr.db.`public`.routines.L2Distance()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>public.vector</code>
 */
fun vector(
      configuration: Configuration
    , __1: Vector1536?
    , __2: Int?
    , __3: Boolean?
): Vector1536? {
    val f = com.arbr.db.`public`.routines.Vector()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.vector</code> as a field.
 */
fun vector(
      __1: Vector1536?
    , __2: Int?
    , __3: Boolean?
): Field<Vector1536?> {
    val f = com.arbr.db.`public`.routines.Vector()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>public.vector</code> as a field.
 */
fun vector(
      __1: Field<Vector1536?>
    , __2: Field<Int?>
    , __3: Field<Boolean?>
): Field<Vector1536?> {
    val f = com.arbr.db.`public`.routines.Vector()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>public.vector_accum</code>
 */
fun vectorAccum(
      configuration: Configuration
    , __1: Array<Double?>?
    , __2: Vector1536?
): Array<Double?>? {
    val f = com.arbr.db.`public`.routines.VectorAccum()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.vector_accum</code> as a field.
 */
fun vectorAccum(
      __1: Array<Double?>?
    , __2: Vector1536?
): Field<Array<Double?>?> {
    val f = com.arbr.db.`public`.routines.VectorAccum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>public.vector_accum</code> as a field.
 */
fun vectorAccum(
      __1: Field<Array<Double?>?>
    , __2: Field<Vector1536?>
): Field<Array<Double?>?> {
    val f = com.arbr.db.`public`.routines.VectorAccum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>public.vector_add</code>
 */
fun vectorAdd(
      configuration: Configuration
    , __1: Vector1536?
    , __2: Vector1536?
): Vector1536? {
    val f = com.arbr.db.`public`.routines.VectorAdd()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.vector_add</code> as a field.
 */
fun vectorAdd(
      __1: Vector1536?
    , __2: Vector1536?
): Field<Vector1536?> {
    val f = com.arbr.db.`public`.routines.VectorAdd()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>public.vector_add</code> as a field.
 */
fun vectorAdd(
      __1: Field<Vector1536?>
    , __2: Field<Vector1536?>
): Field<Vector1536?> {
    val f = com.arbr.db.`public`.routines.VectorAdd()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>public.vector_avg</code>
 */
fun vectorAvg(
      configuration: Configuration
    , __1: Array<Double?>?
): Vector1536? {
    val f = com.arbr.db.`public`.routines.VectorAvg()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.vector_avg</code> as a field.
 */
fun vectorAvg(
      __1: Array<Double?>?
): Field<Vector1536?> {
    val f = com.arbr.db.`public`.routines.VectorAvg()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>public.vector_avg</code> as a field.
 */
fun vectorAvg(
      __1: Field<Array<Double?>?>
): Field<Vector1536?> {
    val f = com.arbr.db.`public`.routines.VectorAvg()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>public.vector_cmp</code>
 */
fun vectorCmp(
      configuration: Configuration
    , __1: Vector1536?
    , __2: Vector1536?
): Int? {
    val f = com.arbr.db.`public`.routines.VectorCmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.vector_cmp</code> as a field.
 */
fun vectorCmp(
      __1: Vector1536?
    , __2: Vector1536?
): Field<Int?> {
    val f = com.arbr.db.`public`.routines.VectorCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>public.vector_cmp</code> as a field.
 */
fun vectorCmp(
      __1: Field<Vector1536?>
    , __2: Field<Vector1536?>
): Field<Int?> {
    val f = com.arbr.db.`public`.routines.VectorCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>public.vector_combine</code>
 */
fun vectorCombine(
      configuration: Configuration
    , __1: Array<Double?>?
    , __2: Array<Double?>?
): Array<Double?>? {
    val f = com.arbr.db.`public`.routines.VectorCombine()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.vector_combine</code> as a field.
 */
fun vectorCombine(
      __1: Array<Double?>?
    , __2: Array<Double?>?
): Field<Array<Double?>?> {
    val f = com.arbr.db.`public`.routines.VectorCombine()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>public.vector_combine</code> as a field.
 */
fun vectorCombine(
      __1: Field<Array<Double?>?>
    , __2: Field<Array<Double?>?>
): Field<Array<Double?>?> {
    val f = com.arbr.db.`public`.routines.VectorCombine()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>public.vector_dims</code>
 */
fun vectorDims(
      configuration: Configuration
    , __1: Vector1536?
): Int? {
    val f = com.arbr.db.`public`.routines.VectorDims()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.vector_dims</code> as a field.
 */
fun vectorDims(
      __1: Vector1536?
): Field<Int?> {
    val f = com.arbr.db.`public`.routines.VectorDims()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>public.vector_dims</code> as a field.
 */
fun vectorDims(
      __1: Field<Vector1536?>
): Field<Int?> {
    val f = com.arbr.db.`public`.routines.VectorDims()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>public.vector_eq</code>
 */
fun vectorEq(
      configuration: Configuration
    , __1: Vector1536?
    , __2: Vector1536?
): Boolean? {
    val f = com.arbr.db.`public`.routines.VectorEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.vector_eq</code> as a field.
 */
fun vectorEq(
      __1: Vector1536?
    , __2: Vector1536?
): Field<Boolean?> {
    val f = com.arbr.db.`public`.routines.VectorEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>public.vector_eq</code> as a field.
 */
fun vectorEq(
      __1: Field<Vector1536?>
    , __2: Field<Vector1536?>
): Field<Boolean?> {
    val f = com.arbr.db.`public`.routines.VectorEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>public.vector_ge</code>
 */
fun vectorGe(
      configuration: Configuration
    , __1: Vector1536?
    , __2: Vector1536?
): Boolean? {
    val f = com.arbr.db.`public`.routines.VectorGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.vector_ge</code> as a field.
 */
fun vectorGe(
      __1: Vector1536?
    , __2: Vector1536?
): Field<Boolean?> {
    val f = com.arbr.db.`public`.routines.VectorGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>public.vector_ge</code> as a field.
 */
fun vectorGe(
      __1: Field<Vector1536?>
    , __2: Field<Vector1536?>
): Field<Boolean?> {
    val f = com.arbr.db.`public`.routines.VectorGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>public.vector_gt</code>
 */
fun vectorGt(
      configuration: Configuration
    , __1: Vector1536?
    , __2: Vector1536?
): Boolean? {
    val f = com.arbr.db.`public`.routines.VectorGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.vector_gt</code> as a field.
 */
fun vectorGt(
      __1: Vector1536?
    , __2: Vector1536?
): Field<Boolean?> {
    val f = com.arbr.db.`public`.routines.VectorGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>public.vector_gt</code> as a field.
 */
fun vectorGt(
      __1: Field<Vector1536?>
    , __2: Field<Vector1536?>
): Field<Boolean?> {
    val f = com.arbr.db.`public`.routines.VectorGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun vectorIn(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): Vector1536? {
    val f = com.arbr.db.`public`.routines.VectorIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun vectorIn(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<Vector1536?> {
    val f = com.arbr.db.`public`.routines.VectorIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun vectorIn(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<Vector1536?> {
    val f = com.arbr.db.`public`.routines.VectorIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>public.vector_l2_squared_distance</code>
 */
fun vectorL2SquaredDistance(
      configuration: Configuration
    , __1: Vector1536?
    , __2: Vector1536?
): Double? {
    val f = com.arbr.db.`public`.routines.VectorL2SquaredDistance()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.vector_l2_squared_distance</code> as a field.
 */
fun vectorL2SquaredDistance(
      __1: Vector1536?
    , __2: Vector1536?
): Field<Double?> {
    val f = com.arbr.db.`public`.routines.VectorL2SquaredDistance()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>public.vector_l2_squared_distance</code> as a field.
 */
fun vectorL2SquaredDistance(
      __1: Field<Vector1536?>
    , __2: Field<Vector1536?>
): Field<Double?> {
    val f = com.arbr.db.`public`.routines.VectorL2SquaredDistance()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>public.vector_le</code>
 */
fun vectorLe(
      configuration: Configuration
    , __1: Vector1536?
    , __2: Vector1536?
): Boolean? {
    val f = com.arbr.db.`public`.routines.VectorLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.vector_le</code> as a field.
 */
fun vectorLe(
      __1: Vector1536?
    , __2: Vector1536?
): Field<Boolean?> {
    val f = com.arbr.db.`public`.routines.VectorLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>public.vector_le</code> as a field.
 */
fun vectorLe(
      __1: Field<Vector1536?>
    , __2: Field<Vector1536?>
): Field<Boolean?> {
    val f = com.arbr.db.`public`.routines.VectorLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>public.vector_lt</code>
 */
fun vectorLt(
      configuration: Configuration
    , __1: Vector1536?
    , __2: Vector1536?
): Boolean? {
    val f = com.arbr.db.`public`.routines.VectorLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.vector_lt</code> as a field.
 */
fun vectorLt(
      __1: Vector1536?
    , __2: Vector1536?
): Field<Boolean?> {
    val f = com.arbr.db.`public`.routines.VectorLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>public.vector_lt</code> as a field.
 */
fun vectorLt(
      __1: Field<Vector1536?>
    , __2: Field<Vector1536?>
): Field<Boolean?> {
    val f = com.arbr.db.`public`.routines.VectorLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>public.vector_ne</code>
 */
fun vectorNe(
      configuration: Configuration
    , __1: Vector1536?
    , __2: Vector1536?
): Boolean? {
    val f = com.arbr.db.`public`.routines.VectorNe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.vector_ne</code> as a field.
 */
fun vectorNe(
      __1: Vector1536?
    , __2: Vector1536?
): Field<Boolean?> {
    val f = com.arbr.db.`public`.routines.VectorNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>public.vector_ne</code> as a field.
 */
fun vectorNe(
      __1: Field<Vector1536?>
    , __2: Field<Vector1536?>
): Field<Boolean?> {
    val f = com.arbr.db.`public`.routines.VectorNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>public.vector_negative_inner_product</code>
 */
fun vectorNegativeInnerProduct(
      configuration: Configuration
    , __1: Vector1536?
    , __2: Vector1536?
): Double? {
    val f = com.arbr.db.`public`.routines.VectorNegativeInnerProduct()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.vector_negative_inner_product</code> as a field.
 */
fun vectorNegativeInnerProduct(
      __1: Vector1536?
    , __2: Vector1536?
): Field<Double?> {
    val f = com.arbr.db.`public`.routines.VectorNegativeInnerProduct()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>public.vector_negative_inner_product</code> as a field.
 */
fun vectorNegativeInnerProduct(
      __1: Field<Vector1536?>
    , __2: Field<Vector1536?>
): Field<Double?> {
    val f = com.arbr.db.`public`.routines.VectorNegativeInnerProduct()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>public.vector_norm</code>
 */
fun vectorNorm(
      configuration: Configuration
    , __1: Vector1536?
): Double? {
    val f = com.arbr.db.`public`.routines.VectorNorm()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.vector_norm</code> as a field.
 */
fun vectorNorm(
      __1: Vector1536?
): Field<Double?> {
    val f = com.arbr.db.`public`.routines.VectorNorm()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>public.vector_norm</code> as a field.
 */
fun vectorNorm(
      __1: Field<Vector1536?>
): Field<Double?> {
    val f = com.arbr.db.`public`.routines.VectorNorm()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun vectorOut(
      configuration: Configuration
    , __1: Vector1536?
): Any? {
    val f = com.arbr.db.`public`.routines.VectorOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun vectorOut(
      __1: Vector1536?
): Field<Any?> {
    val f = com.arbr.db.`public`.routines.VectorOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun vectorOut(
      __1: Field<Vector1536?>
): Field<Any?> {
    val f = com.arbr.db.`public`.routines.VectorOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun vectorRecv(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): Vector1536? {
    val f = com.arbr.db.`public`.routines.VectorRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun vectorRecv(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<Vector1536?> {
    val f = com.arbr.db.`public`.routines.VectorRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun vectorRecv(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<Vector1536?> {
    val f = com.arbr.db.`public`.routines.VectorRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>public.vector_send</code>
 */
fun vectorSend(
      configuration: Configuration
    , __1: Vector1536?
): ByteArray? {
    val f = com.arbr.db.`public`.routines.VectorSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.vector_send</code> as a field.
 */
fun vectorSend(
      __1: Vector1536?
): Field<ByteArray?> {
    val f = com.arbr.db.`public`.routines.VectorSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>public.vector_send</code> as a field.
 */
fun vectorSend(
      __1: Field<Vector1536?>
): Field<ByteArray?> {
    val f = com.arbr.db.`public`.routines.VectorSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>public.vector_spherical_distance</code>
 */
fun vectorSphericalDistance(
      configuration: Configuration
    , __1: Vector1536?
    , __2: Vector1536?
): Double? {
    val f = com.arbr.db.`public`.routines.VectorSphericalDistance()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.vector_spherical_distance</code> as a field.
 */
fun vectorSphericalDistance(
      __1: Vector1536?
    , __2: Vector1536?
): Field<Double?> {
    val f = com.arbr.db.`public`.routines.VectorSphericalDistance()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>public.vector_spherical_distance</code> as a field.
 */
fun vectorSphericalDistance(
      __1: Field<Vector1536?>
    , __2: Field<Vector1536?>
): Field<Double?> {
    val f = com.arbr.db.`public`.routines.VectorSphericalDistance()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>public.vector_sub</code>
 */
fun vectorSub(
      configuration: Configuration
    , __1: Vector1536?
    , __2: Vector1536?
): Vector1536? {
    val f = com.arbr.db.`public`.routines.VectorSub()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.vector_sub</code> as a field.
 */
fun vectorSub(
      __1: Vector1536?
    , __2: Vector1536?
): Field<Vector1536?> {
    val f = com.arbr.db.`public`.routines.VectorSub()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>public.vector_sub</code> as a field.
 */
fun vectorSub(
      __1: Field<Vector1536?>
    , __2: Field<Vector1536?>
): Field<Vector1536?> {
    val f = com.arbr.db.`public`.routines.VectorSub()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>public.vector_to_float4</code>
 */
fun vectorToFloat4(
      configuration: Configuration
    , __1: Vector1536?
    , __2: Int?
    , __3: Boolean?
): Array<Float?>? {
    val f = com.arbr.db.`public`.routines.VectorToFloat4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.vector_to_float4</code> as a field.
 */
fun vectorToFloat4(
      __1: Vector1536?
    , __2: Int?
    , __3: Boolean?
): Field<Array<Float?>?> {
    val f = com.arbr.db.`public`.routines.VectorToFloat4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>public.vector_to_float4</code> as a field.
 */
fun vectorToFloat4(
      __1: Field<Vector1536?>
    , __2: Field<Int?>
    , __3: Field<Boolean?>
): Field<Array<Float?>?> {
    val f = com.arbr.db.`public`.routines.VectorToFloat4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>public.vector_typmod_in</code>
 */
fun vectorTypmodIn(
      configuration: Configuration
    , __1: Array<Any?>?
): Int? {
    val f = com.arbr.db.`public`.routines.VectorTypmodIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.vector_typmod_in</code> as a field.
 */
fun vectorTypmodIn(
      __1: Array<Any?>?
): Field<Int?> {
    val f = com.arbr.db.`public`.routines.VectorTypmodIn()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>public.vector_typmod_in</code> as a field.
 */
fun vectorTypmodIn(
      __1: Field<Array<Any?>?>
): Field<Int?> {
    val f = com.arbr.db.`public`.routines.VectorTypmodIn()
    f.set__1(__1)

    return f.asField()
}
