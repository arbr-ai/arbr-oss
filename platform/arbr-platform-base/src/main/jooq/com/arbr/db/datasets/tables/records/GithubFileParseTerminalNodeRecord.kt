/*
 * This file is generated by jOOQ.
 */
package com.arbr.db.datasets.tables.records


import com.arbr.db.datasets.tables.GithubFileParseTerminalNode

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GithubFileParseTerminalNodeRecord private constructor() : UpdatableRecordImpl<GithubFileParseTerminalNodeRecord>(GithubFileParseTerminalNode.GITHUB_FILE_PARSE_TERMINAL_NODE), Record3<Long?, Long?, Boolean?> {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var tokenId: Long
        set(value): Unit = set(1, value)
        get(): Long = get(1) as Long

    @Suppress("INAPPLICABLE_JVM_NAME")
    @set:JvmName("setIsError")
    open var isError: Boolean
        set(value): Unit = set(2, value)
        get(): Boolean = get(2) as Boolean

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<Long?, Long?, Boolean?> = super.fieldsRow() as Row3<Long?, Long?, Boolean?>
    override fun valuesRow(): Row3<Long?, Long?, Boolean?> = super.valuesRow() as Row3<Long?, Long?, Boolean?>
    override fun field1(): Field<Long?> = GithubFileParseTerminalNode.GITHUB_FILE_PARSE_TERMINAL_NODE.ID
    override fun field2(): Field<Long?> = GithubFileParseTerminalNode.GITHUB_FILE_PARSE_TERMINAL_NODE.TOKEN_ID
    override fun field3(): Field<Boolean?> = GithubFileParseTerminalNode.GITHUB_FILE_PARSE_TERMINAL_NODE.IS_ERROR
    override fun component1(): Long? = id
    override fun component2(): Long = tokenId
    override fun component3(): Boolean = isError
    override fun value1(): Long? = id
    override fun value2(): Long = tokenId
    override fun value3(): Boolean = isError

    override fun value1(value: Long?): GithubFileParseTerminalNodeRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Long?): GithubFileParseTerminalNodeRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Boolean?): GithubFileParseTerminalNodeRecord {
        set(2, value)
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: Boolean?): GithubFileParseTerminalNodeRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised GithubFileParseTerminalNodeRecord
     */
    constructor(id: Long? = null, tokenId: Long, isError: Boolean): this() {
        this.id = id
        this.tokenId = tokenId
        this.isError = isError
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised GithubFileParseTerminalNodeRecord
     */
    constructor(value: com.arbr.db.datasets.tables.pojos.GithubFileParseTerminalNode?): this() {
        if (value != null) {
            this.id = value.id
            this.tokenId = value.tokenId
            this.isError = value.isError
            resetChangedOnNotNull()
        }
    }
}
