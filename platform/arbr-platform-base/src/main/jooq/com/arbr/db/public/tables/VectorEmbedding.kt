/*
 * This file is generated by jOOQ.
 */
package com.arbr.db.`public`.tables


import com.arbr.db.binding.Vector1536
import com.arbr.db.binding.Vector1536Binding

import java.util.function.Function

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class VectorEmbedding(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, com.arbr.db.`public`.tables.records.VectorEmbeddingRecord>?,
    aliased: Table<com.arbr.db.`public`.tables.records.VectorEmbeddingRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<com.arbr.db.`public`.tables.records.VectorEmbeddingRecord>(
    alias,
    com.arbr.db.`public`.Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.vector_embedding</code>
         */
        val VECTOR_EMBEDDING: VectorEmbedding = VectorEmbedding()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<com.arbr.db.`public`.tables.records.VectorEmbeddingRecord> = com.arbr.db.`public`.tables.records.VectorEmbeddingRecord::class.java

    /**
     * The column <code>public.vector_embedding.vector_id</code>.
     */
    val VECTOR_ID: TableField<com.arbr.db.`public`.tables.records.VectorEmbeddingRecord, String?> = createField(DSL.name("vector_id"), SQLDataType.VARCHAR(511).nullable(false), this, "")

    /**
     * The column <code>public.vector_embedding.namespace</code>.
     */
    val NAMESPACE: TableField<com.arbr.db.`public`.tables.records.VectorEmbeddingRecord, String?> = createField(DSL.name("namespace"), SQLDataType.VARCHAR(511).nullable(false), this, "")

    /**
     * The column <code>public.vector_embedding.version_id</code>.
     */
    val VERSION_ID: TableField<com.arbr.db.`public`.tables.records.VectorEmbeddingRecord, String?> = createField(DSL.name("version_id"), SQLDataType.VARCHAR(511).nullable(false), this, "")

    /**
     * The column <code>public.vector_embedding.schema_id</code>.
     */
    val SCHEMA_ID: TableField<com.arbr.db.`public`.tables.records.VectorEmbeddingRecord, String?> = createField(DSL.name("schema_id"), SQLDataType.VARCHAR(511).nullable(false), this, "")

    /**
     * The column <code>public.vector_embedding.embedding_content</code>.
     */
    val EMBEDDING_CONTENT: TableField<com.arbr.db.`public`.tables.records.VectorEmbeddingRecord, String?> = createField(DSL.name("embedding_content"), SQLDataType.VARCHAR(65535).nullable(false), this, "")

    /**
     * The column <code>public.vector_embedding.embedding</code>.
     */
    val EMBEDDING: TableField<com.arbr.db.`public`.tables.records.VectorEmbeddingRecord, Vector1536?> = createField(DSL.name("embedding"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"public\".\"vector\"").nullable(false), this, "", Vector1536Binding())

    private constructor(alias: Name, aliased: Table<com.arbr.db.`public`.tables.records.VectorEmbeddingRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<com.arbr.db.`public`.tables.records.VectorEmbeddingRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.vector_embedding</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.vector_embedding</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.vector_embedding</code> table reference
     */
    constructor(): this(DSL.name("vector_embedding"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, com.arbr.db.`public`.tables.records.VectorEmbeddingRecord>): this(Internal.createPathAlias(child, key), child, key, VECTOR_EMBEDDING, null)
    override fun getSchema(): Schema? = if (aliased()) null else com.arbr.db.`public`.Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<com.arbr.db.`public`.tables.records.VectorEmbeddingRecord> = com.arbr.db.`public`.keys.VECTOR_EMBEDDING_PKEY
    override fun `as`(alias: String): VectorEmbedding = VectorEmbedding(DSL.name(alias), this)
    override fun `as`(alias: Name): VectorEmbedding = VectorEmbedding(alias, this)
    override fun `as`(alias: Table<*>): VectorEmbedding = VectorEmbedding(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): VectorEmbedding = VectorEmbedding(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): VectorEmbedding = VectorEmbedding(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): VectorEmbedding = VectorEmbedding(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<String?, String?, String?, String?, String?, Vector1536?> = super.fieldsRow() as Row6<String?, String?, String?, String?, String?, Vector1536?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, String?, String?, String?, String?, Vector1536?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, String?, String?, String?, String?, Vector1536?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
