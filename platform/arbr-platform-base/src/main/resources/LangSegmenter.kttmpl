package com.topdown.parsers.lang.{%lang_id%}.segmenter

import com.topdown.parsers.base.BaseLanguageFactory
import com.topdown.parsers.lang.{%lang_id%}.base.{%lang_title%}Lexer
import com.topdown.parsers.lang.{%lang_id%}.base.{%lang_title%}Parser
import com.topdown.parsers.lang.universal.tree_parsing.TreeParsingListener
import com.topdown.parsers.lang.universal.tree_parsing.UniversalTreeParsingListener
import org.antlr.v4.runtime.ANTLRErrorListener
import org.antlr.v4.runtime.CharStreams
import org.antlr.v4.runtime.CommonTokenStream
import org.antlr.v4.runtime.Lexer
import org.antlr.v4.runtime.tree.ParseTree

class {%lang_title%}Segmenter : BaseLanguageFactory {
    override fun lexerFromFileContents(fileContents: String): Lexer {
        return {%lang_title%}Lexer(CharStreams.fromString(fileContents))
            .also { it.removeErrorListeners() }
    }

    override fun makeTreeParsingListener(contentLength: Long, tokens: CommonTokenStream): TreeParsingListener {
        // TODO: Support autogenerated tree parsing listeners
        return UniversalTreeParsingListener(contentLength)
    }

    override fun makeParseTree(commonTokenStream: CommonTokenStream, errorListener: ANTLRErrorListener): ParseTree {
        return {%lang_title%}Parser(commonTokenStream)
            .also { it.removeErrorListeners() }
            .also { it.addErrorListener(errorListener) }
            .{%lang_root_context%}()
    }
}
